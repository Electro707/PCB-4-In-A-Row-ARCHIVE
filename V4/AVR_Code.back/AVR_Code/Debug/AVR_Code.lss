
AVR_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001284  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080010c  0080010c  00001324  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eec  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000837  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b19  00000000  00000000  00002b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00003620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020f9  00000000  00000000  00003bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  00005cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e8       	ldi	r30, 0x84	; 132
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 30       	cpi	r26, 0x0C	; 12
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e0       	ldi	r26, 0x0C	; 12
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 33       	cpi	r26, 0x36	; 54
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 75 04 	call	0x8ea	; 0x8ea <main>
      9e:	0c 94 40 09 	jmp	0x1280	; 0x1280 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <reset_shift_registers>:
}

// TODO: Turn this into a macro
// Function to clear the buffer of an array
void clearBuffer(uint16_t *c, int array_lenght){
	for(int i=0;i<array_lenght;i++){
      a6:	8c b5       	in	r24, 0x2c	; 44
      a8:	8f 7b       	andi	r24, 0xBF	; 191
      aa:	8c bd       	out	0x2c, r24	; 44
      ac:	24 9a       	sbi	0x04, 4	; 4
      ae:	2c 9a       	sbi	0x05, 4	; 5
      b0:	2f ef       	ldi	r18, 0xFF	; 255
      b2:	89 ef       	ldi	r24, 0xF9	; 249
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	21 50       	subi	r18, 0x01	; 1
      b8:	80 40       	sbci	r24, 0x00	; 0
      ba:	90 40       	sbci	r25, 0x00	; 0
      bc:	e1 f7       	brne	.-8      	; 0xb6 <reset_shift_registers+0x10>
      be:	00 c0       	rjmp	.+0      	; 0xc0 <reset_shift_registers+0x1a>
      c0:	00 00       	nop
      c2:	2c 98       	cbi	0x05, 4	; 5
      c4:	2f ef       	ldi	r18, 0xFF	; 255
      c6:	89 ef       	ldi	r24, 0xF9	; 249
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	21 50       	subi	r18, 0x01	; 1
      cc:	80 40       	sbci	r24, 0x00	; 0
      ce:	90 40       	sbci	r25, 0x00	; 0
      d0:	e1 f7       	brne	.-8      	; 0xca <reset_shift_registers+0x24>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <reset_shift_registers+0x2e>
      d4:	00 00       	nop
      d6:	2c 9a       	sbi	0x05, 4	; 5
      d8:	2f ef       	ldi	r18, 0xFF	; 255
      da:	89 ef       	ldi	r24, 0xF9	; 249
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	21 50       	subi	r18, 0x01	; 1
      e0:	80 40       	sbci	r24, 0x00	; 0
      e2:	90 40       	sbci	r25, 0x00	; 0
      e4:	e1 f7       	brne	.-8      	; 0xde <reset_shift_registers+0x38>
      e6:	00 c0       	rjmp	.+0      	; 0xe8 <reset_shift_registers+0x42>
      e8:	00 00       	nop
      ea:	24 98       	cbi	0x04, 4	; 4
      ec:	08 95       	ret

000000ee <__vector_16>:
      ee:	1f 92       	push	r1
      f0:	0f 92       	push	r0
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	0f 92       	push	r0
      f6:	11 24       	eor	r1, r1
      f8:	4f 93       	push	r20
      fa:	5f 93       	push	r21
      fc:	6f 93       	push	r22
      fe:	7f 93       	push	r23
     100:	8f 93       	push	r24
     102:	9f 93       	push	r25
     104:	af 93       	push	r26
     106:	bf 93       	push	r27
     108:	ef 93       	push	r30
     10a:	ff 93       	push	r31
     10c:	29 98       	cbi	0x05, 1	; 5
     10e:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <current_led>
     112:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <current_led+0x1>
     116:	aa 0f       	add	r26, r26
     118:	bb 1f       	adc	r27, r27
     11a:	aa 0f       	add	r26, r26
     11c:	bb 1f       	adc	r27, r27
     11e:	a0 50       	subi	r26, 0x00	; 0
     120:	bf 4f       	sbci	r27, 0xFF	; 255
     122:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <current_row>
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	ee 0f       	add	r30, r30
     12a:	ff 1f       	adc	r31, r31
     12c:	ee 0f       	add	r30, r30
     12e:	ff 1f       	adc	r31, r31
     130:	e2 5e       	subi	r30, 0xE2	; 226
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	4d 91       	ld	r20, X+
     136:	5d 91       	ld	r21, X+
     138:	6d 91       	ld	r22, X+
     13a:	7c 91       	ld	r23, X
     13c:	80 81       	ld	r24, Z
     13e:	91 81       	ldd	r25, Z+1	; 0x01
     140:	a2 81       	ldd	r26, Z+2	; 0x02
     142:	b3 81       	ldd	r27, Z+3	; 0x03
     144:	84 23       	and	r24, r20
     146:	95 23       	and	r25, r21
     148:	a6 23       	and	r26, r22
     14a:	b7 23       	and	r27, r23
     14c:	ad 01       	movw	r20, r26
     14e:	66 27       	eor	r22, r22
     150:	77 27       	eor	r23, r23
     152:	4e bd       	out	0x2e, r20	; 46
     154:	0d b4       	in	r0, 0x2d	; 45
     156:	07 fe       	sbrs	r0, 7
     158:	fd cf       	rjmp	.-6      	; 0x154 <__vector_16+0x66>
     15a:	49 2f       	mov	r20, r25
     15c:	5a 2f       	mov	r21, r26
     15e:	6b 2f       	mov	r22, r27
     160:	77 27       	eor	r23, r23
     162:	4e bd       	out	0x2e, r20	; 46
     164:	0d b4       	in	r0, 0x2d	; 45
     166:	07 fe       	sbrs	r0, 7
     168:	fd cf       	rjmp	.-6      	; 0x164 <__vector_16+0x76>
     16a:	8e bd       	out	0x2e, r24	; 46
     16c:	0d b4       	in	r0, 0x2d	; 45
     16e:	07 fe       	sbrs	r0, 7
     170:	fd cf       	rjmp	.-6      	; 0x16c <__vector_16+0x7e>
     172:	29 9a       	sbi	0x05, 1	; 5
     174:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <current_led>
     178:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <current_led+0x1>
     17c:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <current_led+0x2>
     180:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <current_led+0x3>
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	a1 1d       	adc	r26, r1
     188:	b1 1d       	adc	r27, r1
     18a:	83 30       	cpi	r24, 0x03	; 3
     18c:	91 05       	cpc	r25, r1
     18e:	a1 05       	cpc	r26, r1
     190:	b1 05       	cpc	r27, r1
     192:	b9 f0       	breq	.+46     	; 0x1c2 <__vector_16+0xd4>
     194:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <current_led>
     198:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <current_led+0x1>
     19c:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <current_led+0x2>
     1a0:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <current_led+0x3>
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	bf 91       	pop	r27
     1aa:	af 91       	pop	r26
     1ac:	9f 91       	pop	r25
     1ae:	8f 91       	pop	r24
     1b0:	7f 91       	pop	r23
     1b2:	6f 91       	pop	r22
     1b4:	5f 91       	pop	r21
     1b6:	4f 91       	pop	r20
     1b8:	0f 90       	pop	r0
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	0f 90       	pop	r0
     1be:	1f 90       	pop	r1
     1c0:	18 95       	reti
     1c2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <current_led>
     1c6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <current_led+0x1>
     1ca:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <current_led+0x2>
     1ce:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <current_led+0x3>
     1d2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_row>
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	86 30       	cpi	r24, 0x06	; 6
     1da:	51 f0       	breq	.+20     	; 0x1f0 <__vector_16+0x102>
     1dc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_row>
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <__vector_16+0xf8>
     1e4:	99 0f       	add	r25, r25
     1e6:	8a 95       	dec	r24
     1e8:	ea f7       	brpl	.-6      	; 0x1e4 <__vector_16+0xf6>
     1ea:	89 2f       	mov	r24, r25
     1ec:	88 b9       	out	0x08, r24	; 8
     1ee:	da cf       	rjmp	.-76     	; 0x1a4 <__vector_16+0xb6>
     1f0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <current_row>
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	d5 cf       	rjmp	.-86     	; 0x1a4 <__vector_16+0xb6>

000001fa <checkForWinner>:
}


// Function to check for a game winner
// Returns 0 if none, 1 for player 1, and 2 for player 2
uint8_t checkForWinner(void){
     1fa:	3f 92       	push	r3
     1fc:	4f 92       	push	r4
     1fe:	5f 92       	push	r5
     200:	6f 92       	push	r6
     202:	7f 92       	push	r7
     204:	8f 92       	push	r8
     206:	9f 92       	push	r9
     208:	af 92       	push	r10
     20a:	bf 92       	push	r11
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <players>
     220:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <players+0x1>
     224:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <players+0x2>
     228:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <players+0x3>
     22c:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <players+0x4>
     230:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <players+0x5>
     234:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <players+0x6>
     238:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <players+0x7>
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     23c:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <players+0x8>
     240:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <players+0x9>
     244:	80 90 1c 01 	lds	r8, 0x011C	; 0x80011c <players+0xa>
     248:	90 90 1d 01 	lds	r9, 0x011D	; 0x80011d <players+0xb>
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	f8 2e       	mov	r15, r24
     252:	85 01       	movw	r16, r10
     254:	08 2e       	mov	r0, r24
     256:	02 c0       	rjmp	.+4      	; 0x25c <checkForWinner+0x62>
     258:	16 95       	lsr	r17
     25a:	07 95       	ror	r16
     25c:	0a 94       	dec	r0
     25e:	e2 f7       	brpl	.-8      	; 0x258 <checkForWinner+0x5e>
     260:	bf 01       	movw	r22, r30
     262:	08 2e       	mov	r0, r24
     264:	02 c0       	rjmp	.+4      	; 0x26a <checkForWinner+0x70>
     266:	76 95       	lsr	r23
     268:	67 95       	ror	r22
     26a:	0a 94       	dec	r0
     26c:	e2 f7       	brpl	.-8      	; 0x266 <checkForWinner+0x6c>
     26e:	e8 01       	movw	r28, r16
     270:	c6 27       	eor	r28, r22
     272:	d7 27       	eor	r29, r23
     274:	c3 70       	andi	r28, 0x03	; 3
     276:	dd 27       	eor	r29, r29
     278:	cd 2b       	or	r28, r29
     27a:	09 f0       	breq	.+2      	; 0x27e <checkForWinner+0x84>
     27c:	d8 c2       	rjmp	.+1456   	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     27e:	03 70       	andi	r16, 0x03	; 3
     280:	11 27       	eor	r17, r17
     282:	ee 24       	eor	r14, r14
     284:	e3 94       	inc	r14
     286:	01 2b       	or	r16, r17
     288:	09 f4       	brne	.+2      	; 0x28c <checkForWinner+0x92>
     28a:	d1 c2       	rjmp	.+1442   	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     28c:	8a 01       	movw	r16, r20
     28e:	0f 2c       	mov	r0, r15
     290:	02 c0       	rjmp	.+4      	; 0x296 <checkForWinner+0x9c>
     292:	16 95       	lsr	r17
     294:	07 95       	ror	r16
     296:	0a 94       	dec	r0
     298:	e2 f7       	brpl	.-8      	; 0x292 <checkForWinner+0x98>
     29a:	eb 01       	movw	r28, r22
     29c:	c0 27       	eor	r28, r16
     29e:	d1 27       	eor	r29, r17
     2a0:	c3 70       	andi	r28, 0x03	; 3
     2a2:	dd 27       	eor	r29, r29
     2a4:	cd 2b       	or	r28, r29
     2a6:	09 f0       	breq	.+2      	; 0x2aa <checkForWinner+0xb0>
     2a8:	d2 c2       	rjmp	.+1444   	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     2aa:	63 70       	andi	r22, 0x03	; 3
     2ac:	77 27       	eor	r23, r23
     2ae:	67 2b       	or	r22, r23
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <checkForWinner+0xba>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     2b2:	e3 94       	inc	r14
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     2b4:	e9 01       	movw	r28, r18
     2b6:	0f 2c       	mov	r0, r15
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <checkForWinner+0xc4>
     2ba:	d6 95       	lsr	r29
     2bc:	c7 95       	ror	r28
     2be:	0a 94       	dec	r0
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <checkForWinner+0xc0>
     2c2:	b8 01       	movw	r22, r16
     2c4:	6c 27       	eor	r22, r28
     2c6:	7d 27       	eor	r23, r29
     2c8:	63 70       	andi	r22, 0x03	; 3
     2ca:	77 27       	eor	r23, r23
     2cc:	67 2b       	or	r22, r23
     2ce:	09 f0       	breq	.+2      	; 0x2d2 <checkForWinner+0xd8>
     2d0:	c0 c2       	rjmp	.+1408   	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     2d2:	b8 01       	movw	r22, r16
     2d4:	63 70       	andi	r22, 0x03	; 3
     2d6:	77 27       	eor	r23, r23
     2d8:	67 2b       	or	r22, r23
     2da:	29 f0       	breq	.+10     	; 0x2e6 <checkForWinner+0xec>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     2dc:	e3 94       	inc	r14
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     2de:	63 e0       	ldi	r22, 0x03	; 3
     2e0:	e6 16       	cp	r14, r22
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <checkForWinner+0xec>
     2e4:	ce c2       	rjmp	.+1436   	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     2e6:	8d 01       	movw	r16, r26
     2e8:	0f 2c       	mov	r0, r15
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <checkForWinner+0xf6>
     2ec:	16 95       	lsr	r17
     2ee:	07 95       	ror	r16
     2f0:	0a 94       	dec	r0
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <checkForWinner+0xf2>
     2f4:	be 01       	movw	r22, r28
     2f6:	60 27       	eor	r22, r16
     2f8:	71 27       	eor	r23, r17
     2fa:	63 70       	andi	r22, 0x03	; 3
     2fc:	77 27       	eor	r23, r23
     2fe:	67 2b       	or	r22, r23
     300:	09 f0       	breq	.+2      	; 0x304 <checkForWinner+0x10a>
     302:	a9 c2       	rjmp	.+1362   	; 0x856 <__LOCK_REGION_LENGTH__+0x456>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     304:	be 01       	movw	r22, r28
     306:	63 70       	andi	r22, 0x03	; 3
     308:	77 27       	eor	r23, r23
     30a:	67 2b       	or	r22, r23
     30c:	29 f0       	breq	.+10     	; 0x318 <checkForWinner+0x11e>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     30e:	e3 94       	inc	r14
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     310:	63 e0       	ldi	r22, 0x03	; 3
     312:	e6 16       	cp	r14, r22
     314:	09 f4       	brne	.+2      	; 0x318 <checkForWinner+0x11e>
     316:	b9 c2       	rjmp	.+1394   	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     318:	b4 01       	movw	r22, r8
     31a:	02 c0       	rjmp	.+4      	; 0x320 <checkForWinner+0x126>
     31c:	76 95       	lsr	r23
     31e:	67 95       	ror	r22
     320:	fa 94       	dec	r15
     322:	e2 f7       	brpl	.-8      	; 0x31c <checkForWinner+0x122>
     324:	60 27       	eor	r22, r16
     326:	71 27       	eor	r23, r17
     328:	63 70       	andi	r22, 0x03	; 3
     32a:	77 27       	eor	r23, r23
     32c:	67 2b       	or	r22, r23
     32e:	49 f4       	brne	.+18     	; 0x342 <checkForWinner+0x148>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     330:	b8 01       	movw	r22, r16
     332:	63 70       	andi	r22, 0x03	; 3
     334:	77 27       	eor	r23, r23
     336:	67 2b       	or	r22, r23
     338:	21 f0       	breq	.+8      	; 0x342 <checkForWinner+0x148>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     33a:	c2 e0       	ldi	r28, 0x02	; 2
     33c:	ec 16       	cp	r14, r28
     33e:	09 f4       	brne	.+2      	; 0x342 <checkForWinner+0x148>
     340:	a8 c2       	rjmp	.+1360   	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     342:	02 96       	adiw	r24, 0x02	; 2
// Function to check for a game winner
// Returns 0 if none, 1 for player 1, and 2 for player 2
uint8_t checkForWinner(void){
	uint8_t winner_player = 0;
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
     344:	8e 30       	cpi	r24, 0x0E	; 14
     346:	91 05       	cpc	r25, r1
     348:	09 f0       	breq	.+2      	; 0x34c <checkForWinner+0x152>
     34a:	82 cf       	rjmp	.-252    	; 0x250 <checkForWinner+0x56>


// Function to check for a game winner
// Returns 0 if none, 1 for player 1, and 2 for player 2
uint8_t checkForWinner(void){
	uint8_t winner_player = 0;
     34c:	31 2c       	mov	r3, r1
     34e:	82 e1       	ldi	r24, 0x12	; 18
     350:	c8 2e       	mov	r12, r24
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	d8 2e       	mov	r13, r24
     356:	9e e1       	ldi	r25, 0x1E	; 30
     358:	69 2e       	mov	r6, r25
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	79 2e       	mov	r7, r25
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     35e:	e6 01       	movw	r28, r12
     360:	89 91       	ld	r24, Y+
     362:	99 91       	ld	r25, Y+
     364:	6e 01       	movw	r12, r28
     366:	ec 01       	movw	r28, r24
     368:	d6 95       	lsr	r29
     36a:	c7 95       	ror	r28
     36c:	d6 95       	lsr	r29
     36e:	c7 95       	ror	r28
     370:	bc 01       	movw	r22, r24
     372:	6c 27       	eor	r22, r28
     374:	7d 27       	eor	r23, r29
     376:	63 70       	andi	r22, 0x03	; 3
     378:	77 27       	eor	r23, r23
     37a:	67 2b       	or	r22, r23
     37c:	09 f0       	breq	.+2      	; 0x380 <checkForWinner+0x186>
     37e:	59 c2       	rjmp	.+1202   	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	8c 01       	movw	r16, r24
     384:	03 70       	andi	r16, 0x03	; 3
     386:	11 27       	eor	r17, r17
     388:	01 2b       	or	r16, r17
     38a:	09 f4       	brne	.+2      	; 0x38e <checkForWinner+0x194>
     38c:	52 c2       	rjmp	.+1188   	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     38e:	7c 01       	movw	r14, r24
     390:	f2 94       	swap	r15
     392:	e2 94       	swap	r14
     394:	1f e0       	ldi	r17, 0x0F	; 15
     396:	e1 22       	and	r14, r17
     398:	ef 24       	eor	r14, r15
     39a:	f1 22       	and	r15, r17
     39c:	ef 24       	eor	r14, r15
     39e:	8e 01       	movw	r16, r28
     3a0:	0e 25       	eor	r16, r14
     3a2:	1f 25       	eor	r17, r15
     3a4:	03 70       	andi	r16, 0x03	; 3
     3a6:	11 27       	eor	r17, r17
     3a8:	01 2b       	or	r16, r17
     3aa:	09 f0       	breq	.+2      	; 0x3ae <checkForWinner+0x1b4>
     3ac:	56 c2       	rjmp	.+1196   	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     3ae:	c3 70       	andi	r28, 0x03	; 3
     3b0:	dd 27       	eor	r29, r29
     3b2:	cd 2b       	or	r28, r29
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <checkForWinner+0x1be>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     3b6:	6f 5f       	subi	r22, 0xFF	; 255
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     3b8:	8c 01       	movw	r16, r24
     3ba:	00 24       	eor	r0, r0
     3bc:	00 0f       	add	r16, r16
     3be:	11 1f       	adc	r17, r17
     3c0:	00 1c       	adc	r0, r0
     3c2:	00 0f       	add	r16, r16
     3c4:	11 1f       	adc	r17, r17
     3c6:	00 1c       	adc	r0, r0
     3c8:	01 2f       	mov	r16, r17
     3ca:	10 2d       	mov	r17, r0
     3cc:	e7 01       	movw	r28, r14
     3ce:	c0 27       	eor	r28, r16
     3d0:	d1 27       	eor	r29, r17
     3d2:	c3 70       	andi	r28, 0x03	; 3
     3d4:	dd 27       	eor	r29, r29
     3d6:	cd 2b       	or	r28, r29
     3d8:	09 f0       	breq	.+2      	; 0x3dc <checkForWinner+0x1e2>
     3da:	41 c2       	rjmp	.+1154   	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     3dc:	e7 01       	movw	r28, r14
     3de:	c3 70       	andi	r28, 0x03	; 3
     3e0:	dd 27       	eor	r29, r29
     3e2:	cd 2b       	or	r28, r29
     3e4:	21 f0       	breq	.+8      	; 0x3ee <checkForWinner+0x1f4>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     3e6:	6f 5f       	subi	r22, 0xFF	; 255
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     3e8:	63 30       	cpi	r22, 0x03	; 3
     3ea:	09 f4       	brne	.+2      	; 0x3ee <checkForWinner+0x1f4>
     3ec:	56 c2       	rjmp	.+1196   	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     3ee:	e9 2e       	mov	r14, r25
     3f0:	ff 24       	eor	r15, r15
     3f2:	e8 01       	movw	r28, r16
     3f4:	ce 25       	eor	r28, r14
     3f6:	df 25       	eor	r29, r15
     3f8:	c3 70       	andi	r28, 0x03	; 3
     3fa:	dd 27       	eor	r29, r29
     3fc:	cd 2b       	or	r28, r29
     3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	30 c2       	rjmp	.+1120   	; 0x862 <__LOCK_REGION_LENGTH__+0x462>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     402:	e8 01       	movw	r28, r16
     404:	c3 70       	andi	r28, 0x03	; 3
     406:	dd 27       	eor	r29, r29
     408:	cd 2b       	or	r28, r29
     40a:	21 f0       	breq	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     40c:	6f 5f       	subi	r22, 0xFF	; 255
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     40e:	63 30       	cpi	r22, 0x03	; 3
     410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	47 c2       	rjmp	.+1166   	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     414:	8c 01       	movw	r16, r24
     416:	01 2f       	mov	r16, r17
     418:	11 27       	eor	r17, r17
     41a:	06 95       	lsr	r16
     41c:	06 95       	lsr	r16
     41e:	e7 01       	movw	r28, r14
     420:	c0 27       	eor	r28, r16
     422:	d1 27       	eor	r29, r17
     424:	c3 70       	andi	r28, 0x03	; 3
     426:	dd 27       	eor	r29, r29
     428:	cd 2b       	or	r28, r29
     42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	1c c2       	rjmp	.+1080   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     42e:	e7 01       	movw	r28, r14
     430:	c3 70       	andi	r28, 0x03	; 3
     432:	dd 27       	eor	r29, r29
     434:	cd 2b       	or	r28, r29
     436:	21 f0       	breq	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     438:	6f 5f       	subi	r22, 0xFF	; 255
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     43a:	63 30       	cpi	r22, 0x03	; 3
     43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	35 c2       	rjmp	.+1130   	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     440:	89 2f       	mov	r24, r25
     442:	99 27       	eor	r25, r25
     444:	82 95       	swap	r24
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	80 27       	eor	r24, r16
     44a:	91 27       	eor	r25, r17
     44c:	83 70       	andi	r24, 0x03	; 3
     44e:	99 27       	eor	r25, r25
     450:	89 2b       	or	r24, r25
     452:	41 f4       	brne	.+16     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     454:	c8 01       	movw	r24, r16
     456:	83 70       	andi	r24, 0x03	; 3
     458:	99 27       	eor	r25, r25
     45a:	89 2b       	or	r24, r25
     45c:	19 f0       	breq	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     45e:	62 30       	cpi	r22, 0x02	; 2
     460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	27 c2       	rjmp	.+1102   	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
			break;
		}
	}

	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
     464:	6c 14       	cp	r6, r12
     466:	7d 04       	cpc	r7, r13
     468:	09 f0       	breq	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46a:	79 cf       	rjmp	.-270    	; 0x35e <checkForWinner+0x164>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     470:	58 2e       	mov	r5, r24
     472:	79 01       	movw	r14, r18
     474:	08 2e       	mov	r0, r24
     476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     478:	f6 94       	lsr	r15
     47a:	e7 94       	ror	r14
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     480:	bc 01       	movw	r22, r24
     482:	6e 5f       	subi	r22, 0xFE	; 254
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	ea 01       	movw	r28, r20
     488:	06 2e       	mov	r0, r22
     48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48c:	d6 95       	lsr	r29
     48e:	c7 95       	ror	r28
     490:	0a 94       	dec	r0
     492:	e2 f7       	brpl	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     494:	87 01       	movw	r16, r14
     496:	0c 27       	eor	r16, r28
     498:	1d 27       	eor	r17, r29
     49a:	03 70       	andi	r16, 0x03	; 3
     49c:	11 27       	eor	r17, r17
     49e:	01 2b       	or	r16, r17
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a2:	c9 c1       	rjmp	.+914    	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     4a4:	13 e0       	ldi	r17, 0x03	; 3
     4a6:	e1 22       	and	r14, r17
     4a8:	ff 24       	eor	r15, r15
     4aa:	44 24       	eor	r4, r4
     4ac:	43 94       	inc	r4
     4ae:	ef 28       	or	r14, r15
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	c1 c1       	rjmp	.+898    	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
     4b4:	6c 01       	movw	r12, r24
     4b6:	14 e0       	ldi	r17, 0x04	; 4
     4b8:	c1 0e       	add	r12, r17
     4ba:	d1 1c       	adc	r13, r1
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     4bc:	7f 01       	movw	r14, r30
     4be:	0c 2c       	mov	r0, r12
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c2:	f6 94       	lsr	r15
     4c4:	e7 94       	ror	r14
     4c6:	0a 94       	dec	r0
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4ca:	8e 01       	movw	r16, r28
     4cc:	0e 25       	eor	r16, r14
     4ce:	1f 25       	eor	r17, r15
     4d0:	03 70       	andi	r16, 0x03	; 3
     4d2:	11 27       	eor	r17, r17
     4d4:	01 2b       	or	r16, r17
     4d6:	09 f0       	breq	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d8:	c8 c1       	rjmp	.+912    	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     4da:	c3 70       	andi	r28, 0x03	; 3
     4dc:	dd 27       	eor	r29, r29
     4de:	cd 2b       	or	r28, r29
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     4e2:	43 94       	inc	r4
     4e4:	3c 01       	movw	r6, r24
     4e6:	c6 e0       	ldi	r28, 0x06	; 6
     4e8:	6c 0e       	add	r6, r28
     4ea:	71 1c       	adc	r7, r1
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     4ec:	c5 01       	movw	r24, r10
     4ee:	06 2c       	mov	r0, r6
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4f2:	96 95       	lsr	r25
     4f4:	87 95       	ror	r24
     4f6:	0a 94       	dec	r0
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4fa:	8e 25       	eor	r24, r14
     4fc:	9f 25       	eor	r25, r15
     4fe:	83 70       	andi	r24, 0x03	; 3
     500:	99 27       	eor	r25, r25
     502:	89 2b       	or	r24, r25
     504:	49 f4       	brne	.+18     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     506:	c7 01       	movw	r24, r14
     508:	83 70       	andi	r24, 0x03	; 3
     50a:	99 27       	eor	r25, r25
     50c:	89 2b       	or	r24, r25
     50e:	21 f0       	breq	.+8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     510:	d2 e0       	ldi	r29, 0x02	; 2
     512:	4d 16       	cp	r4, r29
     514:	09 f4       	brne	.+2      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     516:	d5 c1       	rjmp	.+938    	; 0x8c2 <__LOCK_REGION_LENGTH__+0x4c2>
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     518:	8d 01       	movw	r16, r26
     51a:	05 2c       	mov	r0, r5
     51c:	02 c0       	rjmp	.+4      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     51e:	16 95       	lsr	r17
     520:	07 95       	ror	r16
     522:	0a 94       	dec	r0
     524:	e2 f7       	brpl	.-8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     526:	c9 01       	movw	r24, r18
     528:	06 2e       	mov	r0, r22
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52c:	96 95       	lsr	r25
     52e:	87 95       	ror	r24
     530:	0a 94       	dec	r0
     532:	e2 f7       	brpl	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     534:	e8 01       	movw	r28, r16
     536:	c8 27       	eor	r28, r24
     538:	d9 27       	eor	r29, r25
     53a:	c3 70       	andi	r28, 0x03	; 3
     53c:	dd 27       	eor	r29, r29
     53e:	cd 2b       	or	r28, r29
     540:	09 f0       	breq	.+2      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     542:	7b c1       	rjmp	.+758    	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     544:	03 70       	andi	r16, 0x03	; 3
     546:	11 27       	eor	r17, r17
     548:	ff 24       	eor	r15, r15
     54a:	f3 94       	inc	r15
     54c:	01 2b       	or	r16, r17
     54e:	09 f4       	brne	.+2      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     550:	74 c1       	rjmp	.+744    	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     552:	8a 01       	movw	r16, r20
     554:	0c 2c       	mov	r0, r12
     556:	02 c0       	rjmp	.+4      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     558:	16 95       	lsr	r17
     55a:	07 95       	ror	r16
     55c:	0a 94       	dec	r0
     55e:	e2 f7       	brpl	.-8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     560:	ec 01       	movw	r28, r24
     562:	c0 27       	eor	r28, r16
     564:	d1 27       	eor	r29, r17
     566:	c3 70       	andi	r28, 0x03	; 3
     568:	dd 27       	eor	r29, r29
     56a:	cd 2b       	or	r28, r29
     56c:	09 f0       	breq	.+2      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     56e:	81 c1       	rjmp	.+770    	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     570:	83 70       	andi	r24, 0x03	; 3
     572:	99 27       	eor	r25, r25
     574:	89 2b       	or	r24, r25
     576:	09 f0       	breq	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     578:	f3 94       	inc	r15
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     57a:	cf 01       	movw	r24, r30
     57c:	06 2c       	mov	r0, r6
     57e:	02 c0       	rjmp	.+4      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     580:	96 95       	lsr	r25
     582:	87 95       	ror	r24
     584:	0a 94       	dec	r0
     586:	e2 f7       	brpl	.-8      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     588:	80 27       	eor	r24, r16
     58a:	91 27       	eor	r25, r17
     58c:	83 70       	andi	r24, 0x03	; 3
     58e:	99 27       	eor	r25, r25
     590:	89 2b       	or	r24, r25
     592:	49 f4       	brne	.+18     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     594:	c8 01       	movw	r24, r16
     596:	83 70       	andi	r24, 0x03	; 3
     598:	99 27       	eor	r25, r25
     59a:	89 2b       	or	r24, r25
     59c:	21 f0       	breq	.+8      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	f8 16       	cp	r15, r24
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5a4:	92 c1       	rjmp	.+804    	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     5a6:	84 01       	movw	r16, r8
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5aa:	16 95       	lsr	r17
     5ac:	07 95       	ror	r16
     5ae:	5a 94       	dec	r5
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5b2:	cd 01       	movw	r24, r26
     5b4:	06 2e       	mov	r0, r22
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5b8:	96 95       	lsr	r25
     5ba:	87 95       	ror	r24
     5bc:	0a 94       	dec	r0
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5c0:	e8 01       	movw	r28, r16
     5c2:	c8 27       	eor	r28, r24
     5c4:	d9 27       	eor	r29, r25
     5c6:	c3 70       	andi	r28, 0x03	; 3
     5c8:	dd 27       	eor	r29, r29
     5ca:	cd 2b       	or	r28, r29
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     5ce:	3d c1       	rjmp	.+634    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     5d0:	e8 01       	movw	r28, r16
     5d2:	c3 70       	andi	r28, 0x03	; 3
     5d4:	dd 27       	eor	r29, r29
     5d6:	ff 24       	eor	r15, r15
     5d8:	f3 94       	inc	r15
     5da:	cd 2b       	or	r28, r29
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5de:	35 c1       	rjmp	.+618    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     5e0:	89 01       	movw	r16, r18
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5e4:	16 95       	lsr	r17
     5e6:	07 95       	ror	r16
     5e8:	ca 94       	dec	r12
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5ec:	ec 01       	movw	r28, r24
     5ee:	c0 27       	eor	r28, r16
     5f0:	d1 27       	eor	r29, r17
     5f2:	c3 70       	andi	r28, 0x03	; 3
     5f4:	dd 27       	eor	r29, r29
     5f6:	cd 2b       	or	r28, r29
     5f8:	09 f0       	breq	.+2      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     5fa:	3f c1       	rjmp	.+638    	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     5fc:	83 70       	andi	r24, 0x03	; 3
     5fe:	99 27       	eor	r25, r25
     600:	89 2b       	or	r24, r25
     602:	09 f0       	breq	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     604:	f3 94       	inc	r15
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     606:	ca 01       	movw	r24, r20
     608:	02 c0       	rjmp	.+4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	6a 94       	dec	r6
     610:	e2 f7       	brpl	.-8      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     612:	80 27       	eor	r24, r16
     614:	91 27       	eor	r25, r17
     616:	83 70       	andi	r24, 0x03	; 3
     618:	99 27       	eor	r25, r25
     61a:	89 2b       	or	r24, r25
     61c:	49 f4       	brne	.+18     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     61e:	c8 01       	movw	r24, r16
     620:	83 70       	andi	r24, 0x03	; 3
     622:	99 27       	eor	r25, r25
     624:	89 2b       	or	r24, r25
     626:	21 f0       	breq	.+8      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     628:	d2 e0       	ldi	r29, 0x02	; 2
     62a:	fd 16       	cp	r15, r29
     62c:	09 f4       	brne	.+2      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     62e:	55 c1       	rjmp	.+682    	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
     630:	cb 01       	movw	r24, r22
		}
	}

	// Check diagonal (positive slope)
	// Check 4 diagonal in a row from the last 3 row and the first 4 column ( the only combination)
	for(int c=0;c<4;c++){
     632:	68 30       	cpi	r22, 0x08	; 8
     634:	71 05       	cpc	r23, r1
     636:	09 f0       	breq	.+2      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     638:	1b cf       	rjmp	.-458    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     63a:	8c e0       	ldi	r24, 0x0C	; 12
     63c:	90 e0       	ldi	r25, 0x00	; 0
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     63e:	58 2e       	mov	r5, r24
     640:	79 01       	movw	r14, r18
     642:	08 2e       	mov	r0, r24
     644:	02 c0       	rjmp	.+4      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     646:	f6 94       	lsr	r15
     648:	e7 94       	ror	r14
     64a:	0a 94       	dec	r0
     64c:	e2 f7       	brpl	.-8      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     64e:	bc 01       	movw	r22, r24
     650:	62 50       	subi	r22, 0x02	; 2
     652:	71 09       	sbc	r23, r1
     654:	ea 01       	movw	r28, r20
     656:	06 2e       	mov	r0, r22
     658:	02 c0       	rjmp	.+4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
     65a:	d6 95       	lsr	r29
     65c:	c7 95       	ror	r28
     65e:	0a 94       	dec	r0
     660:	e2 f7       	brpl	.-8      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     662:	8e 01       	movw	r16, r28
     664:	0e 25       	eor	r16, r14
     666:	1f 25       	eor	r17, r15
     668:	03 70       	andi	r16, 0x03	; 3
     66a:	11 27       	eor	r17, r17
     66c:	01 2b       	or	r16, r17
     66e:	09 f0       	breq	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     670:	e6 c0       	rjmp	.+460    	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     672:	13 e0       	ldi	r17, 0x03	; 3
     674:	e1 22       	and	r14, r17
     676:	ff 24       	eor	r15, r15
     678:	44 24       	eor	r4, r4
     67a:	43 94       	inc	r4
     67c:	ef 28       	or	r14, r15
     67e:	09 f4       	brne	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     680:	de c0       	rjmp	.+444    	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     682:	6c 01       	movw	r12, r24
     684:	14 e0       	ldi	r17, 0x04	; 4
     686:	c1 1a       	sub	r12, r17
     688:	d1 08       	sbc	r13, r1
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     68a:	7f 01       	movw	r14, r30
     68c:	0c 2c       	mov	r0, r12
     68e:	02 c0       	rjmp	.+4      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     690:	f6 94       	lsr	r15
     692:	e7 94       	ror	r14
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     698:	8e 01       	movw	r16, r28
     69a:	0e 25       	eor	r16, r14
     69c:	1f 25       	eor	r17, r15
     69e:	03 70       	andi	r16, 0x03	; 3
     6a0:	11 27       	eor	r17, r17
     6a2:	01 2b       	or	r16, r17
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
     6a6:	e3 c0       	rjmp	.+454    	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     6a8:	c3 70       	andi	r28, 0x03	; 3
     6aa:	dd 27       	eor	r29, r29
     6ac:	cd 2b       	or	r28, r29
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     6b0:	43 94       	inc	r4
     6b2:	3c 01       	movw	r6, r24
     6b4:	c6 e0       	ldi	r28, 0x06	; 6
     6b6:	6c 1a       	sub	r6, r28
     6b8:	71 08       	sbc	r7, r1
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     6ba:	c5 01       	movw	r24, r10
     6bc:	06 2c       	mov	r0, r6
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     6c0:	96 95       	lsr	r25
     6c2:	87 95       	ror	r24
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6c8:	8e 25       	eor	r24, r14
     6ca:	9f 25       	eor	r25, r15
     6cc:	83 70       	andi	r24, 0x03	; 3
     6ce:	99 27       	eor	r25, r25
     6d0:	89 2b       	or	r24, r25
     6d2:	49 f4       	brne	.+18     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     6d4:	c7 01       	movw	r24, r14
     6d6:	83 70       	andi	r24, 0x03	; 3
     6d8:	99 27       	eor	r25, r25
     6da:	89 2b       	or	r24, r25
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     6de:	d2 e0       	ldi	r29, 0x02	; 2
     6e0:	4d 16       	cp	r4, r29
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6e4:	ea c0       	rjmp	.+468    	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     6e6:	8d 01       	movw	r16, r26
     6e8:	05 2c       	mov	r0, r5
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     6ec:	16 95       	lsr	r17
     6ee:	07 95       	ror	r16
     6f0:	0a 94       	dec	r0
     6f2:	e2 f7       	brpl	.-8      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6f4:	c9 01       	movw	r24, r18
     6f6:	06 2e       	mov	r0, r22
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     6fa:	96 95       	lsr	r25
     6fc:	87 95       	ror	r24
     6fe:	0a 94       	dec	r0
     700:	e2 f7       	brpl	.-8      	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     702:	e8 01       	movw	r28, r16
     704:	c8 27       	eor	r28, r24
     706:	d9 27       	eor	r29, r25
     708:	c3 70       	andi	r28, 0x03	; 3
     70a:	dd 27       	eor	r29, r29
     70c:	cd 2b       	or	r28, r29
     70e:	09 f0       	breq	.+2      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     710:	98 c0       	rjmp	.+304    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     712:	03 70       	andi	r16, 0x03	; 3
     714:	11 27       	eor	r17, r17
     716:	ff 24       	eor	r15, r15
     718:	f3 94       	inc	r15
     71a:	01 2b       	or	r16, r17
     71c:	09 f4       	brne	.+2      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     71e:	91 c0       	rjmp	.+290    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     720:	8a 01       	movw	r16, r20
     722:	0c 2c       	mov	r0, r12
     724:	02 c0       	rjmp	.+4      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     726:	16 95       	lsr	r17
     728:	07 95       	ror	r16
     72a:	0a 94       	dec	r0
     72c:	e2 f7       	brpl	.-8      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     72e:	ec 01       	movw	r28, r24
     730:	c0 27       	eor	r28, r16
     732:	d1 27       	eor	r29, r17
     734:	c3 70       	andi	r28, 0x03	; 3
     736:	dd 27       	eor	r29, r29
     738:	cd 2b       	or	r28, r29
     73a:	09 f0       	breq	.+2      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     73c:	9c c0       	rjmp	.+312    	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     73e:	83 70       	andi	r24, 0x03	; 3
     740:	99 27       	eor	r25, r25
     742:	89 2b       	or	r24, r25
     744:	09 f0       	breq	.+2      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     746:	f3 94       	inc	r15
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     748:	cf 01       	movw	r24, r30
     74a:	06 2c       	mov	r0, r6
     74c:	02 c0       	rjmp	.+4      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
     74e:	96 95       	lsr	r25
     750:	87 95       	ror	r24
     752:	0a 94       	dec	r0
     754:	e2 f7       	brpl	.-8      	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
     756:	80 27       	eor	r24, r16
     758:	91 27       	eor	r25, r17
     75a:	83 70       	andi	r24, 0x03	; 3
     75c:	99 27       	eor	r25, r25
     75e:	89 2b       	or	r24, r25
     760:	49 f4       	brne	.+18     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     762:	c8 01       	movw	r24, r16
     764:	83 70       	andi	r24, 0x03	; 3
     766:	99 27       	eor	r25, r25
     768:	89 2b       	or	r24, r25
     76a:	21 f0       	breq	.+8      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	f8 16       	cp	r15, r24
     770:	09 f4       	brne	.+2      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     772:	af c0       	rjmp	.+350    	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     774:	84 01       	movw	r16, r8
     776:	02 c0       	rjmp	.+4      	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
     778:	16 95       	lsr	r17
     77a:	07 95       	ror	r16
     77c:	5a 94       	dec	r5
     77e:	e2 f7       	brpl	.-8      	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
     780:	cd 01       	movw	r24, r26
     782:	06 2e       	mov	r0, r22
     784:	02 c0       	rjmp	.+4      	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     786:	96 95       	lsr	r25
     788:	87 95       	ror	r24
     78a:	0a 94       	dec	r0
     78c:	e2 f7       	brpl	.-8      	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     78e:	ec 01       	movw	r28, r24
     790:	c0 27       	eor	r28, r16
     792:	d1 27       	eor	r29, r17
     794:	c3 70       	andi	r28, 0x03	; 3
     796:	dd 27       	eor	r29, r29
     798:	cd 2b       	or	r28, r29
     79a:	09 f0       	breq	.+2      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
     79c:	54 c0       	rjmp	.+168    	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     79e:	e8 01       	movw	r28, r16
     7a0:	c3 70       	andi	r28, 0x03	; 3
     7a2:	dd 27       	eor	r29, r29
     7a4:	ff 24       	eor	r15, r15
     7a6:	f3 94       	inc	r15
     7a8:	cd 2b       	or	r28, r29
     7aa:	09 f4       	brne	.+2      	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
     7ac:	4c c0       	rjmp	.+152    	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     7ae:	89 01       	movw	r16, r18
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     7b2:	16 95       	lsr	r17
     7b4:	07 95       	ror	r16
     7b6:	ca 94       	dec	r12
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     7ba:	e8 01       	movw	r28, r16
     7bc:	c8 27       	eor	r28, r24
     7be:	d9 27       	eor	r29, r25
     7c0:	c3 70       	andi	r28, 0x03	; 3
     7c2:	dd 27       	eor	r29, r29
     7c4:	cd 2b       	or	r28, r29
     7c6:	09 f0       	breq	.+2      	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
     7c8:	5a c0       	rjmp	.+180    	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     7ca:	83 70       	andi	r24, 0x03	; 3
     7cc:	99 27       	eor	r25, r25
     7ce:	89 2b       	or	r24, r25
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     7d2:	f3 94       	inc	r15
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     7d4:	ca 01       	movw	r24, r20
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
     7d8:	96 95       	lsr	r25
     7da:	87 95       	ror	r24
     7dc:	6a 94       	dec	r6
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     7e0:	80 27       	eor	r24, r16
     7e2:	91 27       	eor	r25, r17
     7e4:	83 70       	andi	r24, 0x03	; 3
     7e6:	99 27       	eor	r25, r25
     7e8:	89 2b       	or	r24, r25
     7ea:	49 f4       	brne	.+18     	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     7ec:	c8 01       	movw	r24, r16
     7ee:	83 70       	andi	r24, 0x03	; 3
     7f0:	99 27       	eor	r25, r25
     7f2:	89 2b       	or	r24, r25
     7f4:	21 f0       	breq	.+8      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     7f6:	d2 e0       	ldi	r29, 0x02	; 2
     7f8:	fd 16       	cp	r15, r29
     7fa:	09 f4       	brne	.+2      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     7fc:	72 c0       	rjmp	.+228    	; 0x8e2 <__LOCK_REGION_LENGTH__+0x4e2>
     7fe:	cb 01       	movw	r24, r22
		}
	}

	// Check diagonal (negative slope)
	// Check 4 diagonal in a row from the last 3 row and the first 4 column ( the only combination)
	for(int c=6;c>2;c--){
     800:	64 30       	cpi	r22, 0x04	; 4
     802:	71 05       	cpc	r23, r1
     804:	09 f0       	breq	.+2      	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
     806:	1b cf       	rjmp	.-458    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
				break;
			}
		}
	}
	return winner_player;
     808:	83 2d       	mov	r24, r3
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	bf 90       	pop	r11
     81c:	af 90       	pop	r10
     81e:	9f 90       	pop	r9
     820:	8f 90       	pop	r8
     822:	7f 90       	pop	r7
     824:	6f 90       	pop	r6
     826:	5f 90       	pop	r5
     828:	4f 90       	pop	r4
     82a:	3f 90       	pop	r3
     82c:	08 95       	ret
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     82e:	e1 2c       	mov	r14, r1
     830:	2d cd       	rjmp	.-1446   	; 0x28c <checkForWinner+0x92>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	ac cd       	rjmp	.-1192   	; 0x38e <checkForWinner+0x194>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     836:	41 2c       	mov	r4, r1
     838:	3d ce       	rjmp	.-902    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     83a:	f1 2c       	mov	r15, r1
     83c:	8a ce       	rjmp	.-748    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     83e:	41 2c       	mov	r4, r1
     840:	20 cf       	rjmp	.-448    	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     842:	f1 2c       	mov	r15, r1
     844:	6d cf       	rjmp	.-294    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     846:	f1 2c       	mov	r15, r1
     848:	b2 cf       	rjmp	.-156    	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     84a:	f1 2c       	mov	r15, r1
     84c:	c9 ce       	rjmp	.-622    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     84e:	e1 2c       	mov	r14, r1
     850:	31 cd       	rjmp	.-1438   	; 0x2b4 <checkForWinner+0xba>
     852:	e1 2c       	mov	r14, r1
     854:	48 cd       	rjmp	.-1392   	; 0x2e6 <checkForWinner+0xec>
     856:	e1 2c       	mov	r14, r1
     858:	5f cd       	rjmp	.-1346   	; 0x318 <checkForWinner+0x11e>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	ad cd       	rjmp	.-1190   	; 0x3b8 <checkForWinner+0x1be>
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	c6 cd       	rjmp	.-1140   	; 0x3ee <checkForWinner+0x1f4>
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	d7 cd       	rjmp	.-1106   	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	eb cd       	rjmp	.-1066   	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     86a:	41 2c       	mov	r4, r1
     86c:	3b ce       	rjmp	.-906    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     86e:	41 2c       	mov	r4, r1
     870:	20 cf       	rjmp	.-448    	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     872:	f1 2c       	mov	r15, r1
     874:	82 ce       	rjmp	.-764    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     876:	f1 2c       	mov	r15, r1
     878:	67 cf       	rjmp	.-306    	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     87a:	f1 2c       	mov	r15, r1
     87c:	c4 ce       	rjmp	.-632    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     87e:	f1 2c       	mov	r15, r1
     880:	a9 cf       	rjmp	.-174    	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
     882:	c0 2f       	mov	r28, r16
     884:	c3 70       	andi	r28, 0x03	; 3
     886:	3c 2e       	mov	r3, r28
     888:	62 cd       	rjmp	.-1340   	; 0x34e <checkForWinner+0x154>
     88a:	8c 2f       	mov	r24, r28
     88c:	83 70       	andi	r24, 0x03	; 3
     88e:	38 2e       	mov	r3, r24
     890:	5e cd       	rjmp	.-1348   	; 0x34e <checkForWinner+0x154>
     892:	d0 2f       	mov	r29, r16
     894:	d3 70       	andi	r29, 0x03	; 3
     896:	3d 2e       	mov	r3, r29
     898:	5a cd       	rjmp	.-1356   	; 0x34e <checkForWinner+0x154>
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
     89a:	de 2d       	mov	r29, r14
     89c:	d3 70       	andi	r29, 0x03	; 3
     89e:	3d 2e       	mov	r3, r29
     8a0:	e5 cd       	rjmp	.-1078   	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     8a2:	d0 2f       	mov	r29, r16
     8a4:	d3 70       	andi	r29, 0x03	; 3
     8a6:	3d 2e       	mov	r3, r29
     8a8:	e1 cd       	rjmp	.-1086   	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     8aa:	1e 2d       	mov	r17, r14
     8ac:	13 70       	andi	r17, 0x03	; 3
     8ae:	31 2e       	mov	r3, r17
     8b0:	dd cd       	rjmp	.-1094   	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     8b2:	60 2f       	mov	r22, r16
     8b4:	63 70       	andi	r22, 0x03	; 3
     8b6:	36 2e       	mov	r3, r22
     8b8:	d9 cd       	rjmp	.-1102   	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
     8ba:	ce 2d       	mov	r28, r14
     8bc:	c3 70       	andi	r28, 0x03	; 3
     8be:	3c 2e       	mov	r3, r28
     8c0:	9e cf       	rjmp	.-196    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
     8c2:	8e 2d       	mov	r24, r14
     8c4:	83 70       	andi	r24, 0x03	; 3
     8c6:	38 2e       	mov	r3, r24
     8c8:	b3 ce       	rjmp	.-666    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     8ca:	c0 2f       	mov	r28, r16
     8cc:	c3 70       	andi	r28, 0x03	; 3
     8ce:	3c 2e       	mov	r3, r28
     8d0:	af ce       	rjmp	.-674    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
     8d2:	c0 2f       	mov	r28, r16
     8d4:	c3 70       	andi	r28, 0x03	; 3
     8d6:	3c 2e       	mov	r3, r28
     8d8:	92 cf       	rjmp	.-220    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
     8da:	80 2f       	mov	r24, r16
     8dc:	83 70       	andi	r24, 0x03	; 3
     8de:	38 2e       	mov	r3, r24
     8e0:	a7 ce       	rjmp	.-690    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
     8e2:	80 2f       	mov	r24, r16
     8e4:	83 70       	andi	r24, 0x03	; 3
     8e6:	38 2e       	mov	r3, r24
     8e8:	8a cf       	rjmp	.-236    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>

000008ea <main>:
int waitForButtonInput(void);
void clearBuffer(uint16_t *c, int array_lenght);
uint8_t checkForWinner(void);

int main(void)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <main+0x6>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <main+0x8>
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <main+0xa>
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
	// Set the LED sink pins to a low output and high impedance
	PORTC = 0;
     8f8:	18 b8       	out	0x08, r1	; 8
	DDRC = 0b111111;
     8fa:	8f e3       	ldi	r24, 0x3F	; 63
     8fc:	87 b9       	out	0x07, r24	; 7
	// Set the buttons to input pull-up
	DDRD = 0x00;
     8fe:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	8b b9       	out	0x0b, r24	; 11
	// Set up PORTB pins
	DDRB |= 0b00101110; // Set all pins to output except for crystal, MISO, and PB0
     904:	84 b1       	in	r24, 0x04	; 4
     906:	8e 62       	ori	r24, 0x2E	; 46
     908:	84 b9       	out	0x04, r24	; 4
	reset_shift_registers();
     90a:	0e 94 53 00 	call	0xa6	; 0xa6 <reset_shift_registers>
	PORTB |= 1<<4; // Due to SRCLR pin being controlled by SPI, it now has a pull-up to avoid it going LOW
     90e:	2c 9a       	sbi	0x05, 4	; 5
	DISABLE_595_OUTPUT;
     910:	2a 9a       	sbi	0x05, 2	; 5
	// Set up SPI module
	SPCR = 0b00010000; // Master mode - Highest clock
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	8c bd       	out	0x2c, r24	; 44
	SPSR |= 1<<0; // Enable clock 2x multiplication
     916:	8d b5       	in	r24, 0x2d	; 45
     918:	81 60       	ori	r24, 0x01	; 1
     91a:	8d bd       	out	0x2d, r24	; 45
	// Set up update timer
	TCCR0B = 2; // Set divider to CLK/8
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x01; // Set time interrupt
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     926:	ee e1       	ldi	r30, 0x1E	; 30
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	88 e1       	ldi	r24, 0x18	; 24
     92c:	df 01       	movw	r26, r30
     92e:	1d 92       	st	X+, r1
     930:	8a 95       	dec	r24
     932:	e9 f7       	brne	.-6      	; 0x92e <__stack+0x2f>
	
	// Clear LEDs variable
	for(int i=0;i<6;i++){led[i] = 0;}
	
	SPI_ENABLE;	
     934:	8c b5       	in	r24, 0x2c	; 44
     936:	80 64       	ori	r24, 0x40	; 64
     938:	8c bd       	out	0x2c, r24	; 44
	sei();
     93a:	78 94       	sei
	ENABLE_595_OUTPUT;
     93c:	2a 98       	cbi	0x05, 2	; 5

// TODO: Turn this into a macro
// Function to clear the buffer of an array
void clearBuffer(uint16_t *c, int array_lenght){
	for(int i=0;i<array_lenght;i++){
		c[i] = 0;
     93e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <players+0x1>
     942:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <players>
     946:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <players+0x3>
     94a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <players+0x2>
     94e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <players+0x5>
     952:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <players+0x4>
     956:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <players+0x7>
     95a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <players+0x6>
     95e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <players+0x9>
     962:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <players+0x8>
     966:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <players+0xb>
     96a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <players+0xa>
// 	DDRC |= 1<<0; // Set fist row enable
// 	PORTC |= (1<<0);
// 	ENABLE_595_OUTPUT; 

 	clearBuffer(players, 6);
 	active_player = 1;			// Set the active player to player 1
     96e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_end>
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
     972:	89 b1       	in	r24, 0x09	; 9
     974:	8f 3f       	cpi	r24, 0xFF	; 255
     976:	e9 f3       	breq	.-6      	; 0x972 <__stack+0x73>
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     978:	48 9b       	sbis	0x09, 0	; 9
     97a:	0c c0       	rjmp	.+24     	; 0x994 <__stack+0x95>
     97c:	49 9b       	sbis	0x09, 1	; 9
     97e:	ff c1       	rjmp	.+1022   	; 0xd7e <__stack+0x47f>
     980:	4a 9b       	sbis	0x09, 2	; 9
     982:	f9 c1       	rjmp	.+1010   	; 0xd76 <__stack+0x477>
     984:	4b 9b       	sbis	0x09, 3	; 9
     986:	ff c1       	rjmp	.+1022   	; 0xd86 <__stack+0x487>
     988:	4c 9b       	sbis	0x09, 4	; 9
     98a:	01 c2       	rjmp	.+1026   	; 0xd8e <__stack+0x48f>
     98c:	4d 9b       	sbis	0x09, 5	; 9
     98e:	c3 c2       	rjmp	.+1414   	; 0xf16 <__stack+0x617>
     990:	4e 9b       	sbis	0x09, 6	; 9
     992:	c5 c2       	rjmp	.+1418   	; 0xf1e <__stack+0x61f>
     994:	6c ef       	ldi	r22, 0xFC	; 252
     996:	7f ef       	ldi	r23, 0xFF	; 255
     998:	40 e0       	ldi	r20, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99a:	bf e7       	ldi	r27, 0x7F	; 127
     99c:	e9 ea       	ldi	r30, 0xA9	; 169
     99e:	f3 e0       	ldi	r31, 0x03	; 3
     9a0:	b1 50       	subi	r27, 0x01	; 1
     9a2:	e0 40       	sbci	r30, 0x00	; 0
     9a4:	f0 40       	sbci	r31, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <__stack+0xa1>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <__stack+0xab>
     9aa:	00 00       	nop
     while (1) 
     {
 		int c = waitForButtonInput();
 		_delay_ms(75);		// Delay for button noise
 		int foundRow = 0;		// Variable to store if the lowest row has been found thru the for loop
 		if(((players[0] >> (c*2)) & 0b11) == 0){		// Only switch player and find the row if the column isn't fully occupied
     9ac:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <players>
     9b0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <players+0x1>
     9b4:	c9 01       	movw	r24, r18
     9b6:	04 2e       	mov	r0, r20
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <__stack+0xbf>
     9ba:	96 95       	lsr	r25
     9bc:	87 95       	ror	r24
     9be:	0a 94       	dec	r0
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <__stack+0xbb>
     9c2:	83 70       	andi	r24, 0x03	; 3
     9c4:	99 27       	eor	r25, r25
     9c6:	89 2b       	or	r24, r25
     9c8:	a1 f6       	brne	.-88     	; 0x972 <__stack+0x73>
 			for(int r=1;r<6;r++){		// Cycle thru all but one row
 				players[r-1] |= active_player << (c*2);		// Set the row LED on of the last row on the loop
     9ca:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	04 2e       	mov	r0, r20
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <__stack+0xd9>
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	0a 94       	dec	r0
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <__stack+0xd5>
     9dc:	28 2b       	or	r18, r24
     9de:	39 2b       	or	r19, r25
     9e0:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <players+0x1>
     9e4:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <players>
     9e8:	a2 e1       	ldi	r26, 0x12	; 18
     9ea:	b1 e0       	ldi	r27, 0x01	; 1
     9ec:	bc 83       	std	Y+4, r27	; 0x04
     9ee:	ab 83       	std	Y+3, r26	; 0x03
     9f0:	01 e0       	ldi	r16, 0x01	; 1
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	38 01       	movw	r6, r16
     9f6:	be 83       	std	Y+6, r27	; 0x06
     9f8:	ad 83       	std	Y+5, r26	; 0x05
     9fa:	7a 83       	std	Y+2, r23	; 0x02
     9fc:	69 83       	std	Y+1, r22	; 0x01
     9fe:	f4 2e       	mov	r15, r20
	}
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
     a00:	f8 94       	cli
     a02:	7e e1       	ldi	r23, 0x1E	; 30
     a04:	27 2e       	mov	r2, r23
     a06:	71 e0       	ldi	r23, 0x01	; 1
     a08:	37 2e       	mov	r3, r23
     a0a:	f1 01       	movw	r30, r2
     a0c:	22 e1       	ldi	r18, 0x12	; 18
     a0e:	31 e0       	ldi	r19, 0x01	; 1
     a10:	4d 80       	ldd	r4, Y+5	; 0x05
     a12:	5e 80       	ldd	r5, Y+6	; 0x06
     a14:	83 c0       	rjmp	.+262    	; 0xb1c <__stack+0x21d>
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	09 f4       	brne	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	ce c0       	rjmp	.+412    	; 0xbb8 <__stack+0x2b9>
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	d1 2c       	mov	r13, r1
     a26:	e1 2c       	mov	r14, r1
     a28:	00 e0       	ldi	r16, 0x00	; 0
     a2a:	10 e0       	ldi	r17, 0x00	; 0
     a2c:	68 e1       	ldi	r22, 0x18	; 24
     a2e:	6d 83       	std	Y+5, r22	; 0x05
     a30:	a1 2c       	mov	r10, r1
     a32:	b1 2c       	mov	r11, r1
     a34:	c1 2c       	mov	r12, r1
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     a36:	ba 01       	movw	r22, r20
     a38:	76 95       	lsr	r23
     a3a:	67 95       	ror	r22
     a3c:	76 95       	lsr	r23
     a3e:	67 95       	ror	r22
     a40:	63 70       	andi	r22, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     a42:	61 30       	cpi	r22, 0x01	; 1
     a44:	31 f0       	breq	.+12     	; 0xa52 <__stack+0x153>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     a46:	62 30       	cpi	r22, 0x02	; 2
     a48:	09 f4       	brne	.+2      	; 0xa4c <__stack+0x14d>
     a4a:	ca c0       	rjmp	.+404    	; 0xbe0 <__stack+0x2e1>
     a4c:	8d 2d       	mov	r24, r13
     a4e:	9e 2d       	mov	r25, r14
     a50:	d8 01       	movw	r26, r16
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     a52:	ba 01       	movw	r22, r20
     a54:	72 95       	swap	r23
     a56:	62 95       	swap	r22
     a58:	6f 70       	andi	r22, 0x0F	; 15
     a5a:	67 27       	eor	r22, r23
     a5c:	7f 70       	andi	r23, 0x0F	; 15
     a5e:	67 27       	eor	r22, r23
     a60:	63 70       	andi	r22, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     a62:	61 30       	cpi	r22, 0x01	; 1
     a64:	09 f4       	brne	.+2      	; 0xa68 <__stack+0x169>
     a66:	89 c0       	rjmp	.+274    	; 0xb7a <__stack+0x27b>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     a68:	62 30       	cpi	r22, 0x02	; 2
     a6a:	09 f4       	brne	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	92 c0       	rjmp	.+292    	; 0xb92 <__stack+0x293>
     a6e:	81 2c       	mov	r8, r1
     a70:	91 2c       	mov	r9, r1
     a72:	54 01       	movw	r10, r8
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     a74:	88 29       	or	r24, r8
     a76:	99 29       	or	r25, r9
     a78:	aa 29       	or	r26, r10
     a7a:	bb 29       	or	r27, r11
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     a7c:	ba 01       	movw	r22, r20
     a7e:	00 24       	eor	r0, r0
     a80:	66 0f       	add	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	00 1c       	adc	r0, r0
     a86:	66 0f       	add	r22, r22
     a88:	77 1f       	adc	r23, r23
     a8a:	00 1c       	adc	r0, r0
     a8c:	67 2f       	mov	r22, r23
     a8e:	70 2d       	mov	r23, r0
     a90:	63 70       	andi	r22, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     a92:	61 30       	cpi	r22, 0x01	; 1
     a94:	09 f4       	brne	.+2      	; 0xa98 <__stack+0x199>
     a96:	6b c0       	rjmp	.+214    	; 0xb6e <__stack+0x26f>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     a98:	62 30       	cpi	r22, 0x02	; 2
     a9a:	09 f4       	brne	.+2      	; 0xa9e <__stack+0x19f>
     a9c:	74 c0       	rjmp	.+232    	; 0xb86 <__stack+0x287>
     a9e:	81 2c       	mov	r8, r1
     aa0:	91 2c       	mov	r9, r1
     aa2:	54 01       	movw	r10, r8
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     aa4:	88 29       	or	r24, r8
     aa6:	99 29       	or	r25, r9
     aa8:	aa 29       	or	r26, r10
     aaa:	bb 29       	or	r27, r11
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     aac:	65 2f       	mov	r22, r21
     aae:	63 70       	andi	r22, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     ab0:	61 30       	cpi	r22, 0x01	; 1
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__stack+0x1b7>
     ab4:	56 c0       	rjmp	.+172    	; 0xb62 <__stack+0x263>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     ab6:	62 30       	cpi	r22, 0x02	; 2
     ab8:	09 f4       	brne	.+2      	; 0xabc <__stack+0x1bd>
     aba:	78 c0       	rjmp	.+240    	; 0xbac <__stack+0x2ad>
     abc:	81 2c       	mov	r8, r1
     abe:	91 2c       	mov	r9, r1
     ac0:	54 01       	movw	r10, r8
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     ac2:	88 29       	or	r24, r8
     ac4:	99 29       	or	r25, r9
     ac6:	aa 29       	or	r26, r10
     ac8:	bb 29       	or	r27, r11
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     aca:	65 2f       	mov	r22, r21
     acc:	66 95       	lsr	r22
     ace:	66 95       	lsr	r22
     ad0:	63 70       	andi	r22, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     ad2:	61 30       	cpi	r22, 0x01	; 1
     ad4:	09 f4       	brne	.+2      	; 0xad8 <__stack+0x1d9>
     ad6:	3f c0       	rjmp	.+126    	; 0xb56 <__stack+0x257>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     ad8:	62 30       	cpi	r22, 0x02	; 2
     ada:	09 f4       	brne	.+2      	; 0xade <__stack+0x1df>
     adc:	60 c0       	rjmp	.+192    	; 0xb9e <__stack+0x29f>
     ade:	81 2c       	mov	r8, r1
     ae0:	91 2c       	mov	r9, r1
     ae2:	54 01       	movw	r10, r8
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     ae4:	88 29       	or	r24, r8
     ae6:	99 29       	or	r25, r9
     ae8:	aa 29       	or	r26, r10
     aea:	bb 29       	or	r27, r11
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     aec:	45 2f       	mov	r20, r21
     aee:	42 95       	swap	r20
     af0:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     af2:	41 30       	cpi	r20, 0x01	; 1
     af4:	59 f1       	breq	.+86     	; 0xb4c <__stack+0x24d>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     af6:	42 30       	cpi	r20, 0x02	; 2
     af8:	09 f4       	brne	.+2      	; 0xafc <__stack+0x1fd>
     afa:	6d c0       	rjmp	.+218    	; 0xbd6 <__stack+0x2d7>
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     b02:	84 2b       	or	r24, r20
     b04:	95 2b       	or	r25, r21
     b06:	a6 2b       	or	r26, r22
     b08:	b7 2b       	or	r27, r23
     b0a:	81 93       	st	Z+, r24
     b0c:	91 93       	st	Z+, r25
     b0e:	a1 93       	st	Z+, r26
     b10:	b1 93       	st	Z+, r27
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	e6 33       	cpi	r30, 0x36	; 54
     b16:	f8 07       	cpc	r31, r24
     b18:	09 f4       	brne	.+2      	; 0xb1c <__stack+0x21d>
     b1a:	67 c0       	rjmp	.+206    	; 0xbea <__stack+0x2eb>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     b1c:	d9 01       	movw	r26, r18
     b1e:	4d 91       	ld	r20, X+
     b20:	5d 91       	ld	r21, X+
     b22:	9d 01       	movw	r18, r26
     b24:	84 2f       	mov	r24, r20
     b26:	83 70       	andi	r24, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	09 f0       	breq	.+2      	; 0xb2e <__stack+0x22f>
     b2c:	74 cf       	rjmp	.-280    	; 0xa16 <__stack+0x117>
     b2e:	89 e0       	ldi	r24, 0x09	; 9
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	dd 24       	eor	r13, r13
     b38:	d3 94       	inc	r13
     b3a:	e1 2c       	mov	r14, r1
     b3c:	00 e0       	ldi	r16, 0x00	; 0
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	69 e1       	ldi	r22, 0x19	; 25
     b42:	6d 83       	std	Y+5, r22	; 0x05
     b44:	a1 2c       	mov	r10, r1
     b46:	b1 2c       	mov	r11, r1
     b48:	c1 2c       	mov	r12, r1
     b4a:	75 cf       	rjmp	.-278    	; 0xa36 <__stack+0x137>
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	d6 cf       	rjmp	.-84     	; 0xb02 <__stack+0x203>
     b56:	81 2c       	mov	r8, r1
     b58:	70 e8       	ldi	r23, 0x80	; 128
     b5a:	97 2e       	mov	r9, r23
     b5c:	a1 2c       	mov	r10, r1
     b5e:	b1 2c       	mov	r11, r1
     b60:	c1 cf       	rjmp	.-126    	; 0xae4 <__stack+0x1e5>
     b62:	81 2c       	mov	r8, r1
     b64:	00 e1       	ldi	r16, 0x10	; 16
     b66:	90 2e       	mov	r9, r16
     b68:	a1 2c       	mov	r10, r1
     b6a:	b1 2c       	mov	r11, r1
     b6c:	aa cf       	rjmp	.-172    	; 0xac2 <__stack+0x1c3>
     b6e:	81 2c       	mov	r8, r1
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	96 2e       	mov	r9, r22
     b74:	a1 2c       	mov	r10, r1
     b76:	b1 2c       	mov	r11, r1
     b78:	95 cf       	rjmp	.-214    	; 0xaa4 <__stack+0x1a5>
     b7a:	60 e4       	ldi	r22, 0x40	; 64
     b7c:	86 2e       	mov	r8, r22
     b7e:	91 2c       	mov	r9, r1
     b80:	a1 2c       	mov	r10, r1
     b82:	b1 2c       	mov	r11, r1
     b84:	77 cf       	rjmp	.-274    	; 0xa74 <__stack+0x175>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     b86:	81 2c       	mov	r8, r1
     b88:	46 e0       	ldi	r20, 0x06	; 6
     b8a:	94 2e       	mov	r9, r20
     b8c:	a1 2c       	mov	r10, r1
     b8e:	b1 2c       	mov	r11, r1
     b90:	89 cf       	rjmp	.-238    	; 0xaa4 <__stack+0x1a5>
     b92:	00 ec       	ldi	r16, 0xC0	; 192
     b94:	80 2e       	mov	r8, r16
     b96:	91 2c       	mov	r9, r1
     b98:	a1 2c       	mov	r10, r1
     b9a:	b1 2c       	mov	r11, r1
     b9c:	6b cf       	rjmp	.-298    	; 0xa74 <__stack+0x175>
     b9e:	81 2c       	mov	r8, r1
     ba0:	60 e8       	ldi	r22, 0x80	; 128
     ba2:	96 2e       	mov	r9, r22
     ba4:	aa 24       	eor	r10, r10
     ba6:	a3 94       	inc	r10
     ba8:	b1 2c       	mov	r11, r1
     baa:	9c cf       	rjmp	.-200    	; 0xae4 <__stack+0x1e5>
     bac:	81 2c       	mov	r8, r1
     bae:	10 e3       	ldi	r17, 0x30	; 48
     bb0:	91 2e       	mov	r9, r17
     bb2:	a1 2c       	mov	r10, r1
     bb4:	b1 2c       	mov	r11, r1
     bb6:	85 cf       	rjmp	.-246    	; 0xac2 <__stack+0x1c3>
     bb8:	8b e0       	ldi	r24, 0x0B	; 11
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	63 e0       	ldi	r22, 0x03	; 3
     bc2:	d6 2e       	mov	r13, r22
     bc4:	e1 2c       	mov	r14, r1
     bc6:	00 e0       	ldi	r16, 0x00	; 0
     bc8:	10 e0       	ldi	r17, 0x00	; 0
     bca:	6b e1       	ldi	r22, 0x1B	; 27
     bcc:	6d 83       	std	Y+5, r22	; 0x05
     bce:	a1 2c       	mov	r10, r1
     bd0:	b1 2c       	mov	r11, r1
     bd2:	c1 2c       	mov	r12, r1
     bd4:	30 cf       	rjmp	.-416    	; 0xa36 <__stack+0x137>
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	6c e0       	ldi	r22, 0x0C	; 12
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	91 cf       	rjmp	.-222    	; 0xb02 <__stack+0x203>
     be0:	8d 81       	ldd	r24, Y+5	; 0x05
     be2:	9a 2d       	mov	r25, r10
     be4:	ab 2d       	mov	r26, r11
     be6:	bc 2d       	mov	r27, r12
     be8:	34 cf       	rjmp	.-408    	; 0xa52 <__stack+0x153>
     bea:	5e 82       	std	Y+6, r5	; 0x06
     bec:	4d 82       	std	Y+5, r4	; 0x05
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
		}
	}
	sei();
     bee:	78 94       	sei
 		if(((players[0] >> (c*2)) & 0b11) == 0){		// Only switch player and find the row if the column isn't fully occupied
 			for(int r=1;r<6;r++){		// Cycle thru all but one row
 				players[r-1] |= active_player << (c*2);		// Set the row LED on of the last row on the loop
 				if(r != 1){players[r-2] &= ~(0b11 << (c*2));}		// If the loop isn't the first one, set the last last row off
 				playerToLed();		// Update the LED array to showcase the animation
 				if(((players[r] >> (c*2)) & 0b11) != 0){		// If the row is occupied, exit the loop ( the led should be set from the last 2 lines)
     bf0:	ad 81       	ldd	r26, Y+5	; 0x05
     bf2:	be 81       	ldd	r27, Y+6	; 0x06
     bf4:	12 96       	adiw	r26, 0x02	; 2
     bf6:	8d 91       	ld	r24, X+
     bf8:	9c 91       	ld	r25, X
     bfa:	13 97       	sbiw	r26, 0x03	; 3
     bfc:	0f 2c       	mov	r0, r15
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <__stack+0x305>
     c00:	96 95       	lsr	r25
     c02:	87 95       	ror	r24
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <__stack+0x301>
     c08:	83 70       	andi	r24, 0x03	; 3
     c0a:	99 27       	eor	r25, r25
     c0c:	89 2b       	or	r24, r25
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__stack+0x377>
     c10:	bf e7       	ldi	r27, 0x7F	; 127
     c12:	e9 ea       	ldi	r30, 0xA9	; 169
     c14:	f3 e0       	ldi	r31, 0x03	; 3
     c16:	b1 50       	subi	r27, 0x01	; 1
     c18:	e0 40       	sbci	r30, 0x00	; 0
     c1a:	f0 40       	sbci	r31, 0x00	; 0
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <__stack+0x317>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <__stack+0x321>
     c20:	00 00       	nop
     {
 		int c = waitForButtonInput();
 		_delay_ms(75);		// Delay for button noise
 		int foundRow = 0;		// Variable to store if the lowest row has been found thru the for loop
 		if(((players[0] >> (c*2)) & 0b11) == 0){		// Only switch player and find the row if the column isn't fully occupied
 			for(int r=1;r<6;r++){		// Cycle thru all but one row
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	62 1a       	sub	r6, r18
     c26:	72 0a       	sbc	r7, r18
     c28:	36 e0       	ldi	r19, 0x06	; 6
     c2a:	63 16       	cp	r6, r19
     c2c:	71 04       	cpc	r7, r1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__stack+0x333>
     c30:	b2 c0       	rjmp	.+356    	; 0xd96 <__stack+0x497>
 				players[r-1] |= active_player << (c*2);		// Set the row LED on of the last row on the loop
     c32:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0f 2c       	mov	r0, r15
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <__stack+0x341>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <__stack+0x33d>
     c44:	ad 81       	ldd	r26, Y+5	; 0x05
     c46:	be 81       	ldd	r27, Y+6	; 0x06
     c48:	12 96       	adiw	r26, 0x02	; 2
     c4a:	2d 91       	ld	r18, X+
     c4c:	3c 91       	ld	r19, X
     c4e:	13 97       	sbiw	r26, 0x03	; 3
     c50:	82 2b       	or	r24, r18
     c52:	93 2b       	or	r25, r19
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	9c 93       	st	X, r25
     c58:	8e 93       	st	-X, r24
     c5a:	12 97       	sbiw	r26, 0x02	; 2
 				if(r != 1){players[r-2] &= ~(0b11 << (c*2));}		// If the loop isn't the first one, set the last last row off
     c5c:	8d 91       	ld	r24, X+
     c5e:	9c 91       	ld	r25, X
     c60:	11 97       	sbiw	r26, 0x01	; 1
     c62:	e9 81       	ldd	r30, Y+1	; 0x01
     c64:	fa 81       	ldd	r31, Y+2	; 0x02
     c66:	8e 23       	and	r24, r30
     c68:	9f 23       	and	r25, r31
     c6a:	8d 93       	st	X+, r24
     c6c:	9d 93       	st	X+, r25
     c6e:	be 83       	std	Y+6, r27	; 0x06
     c70:	ad 83       	std	Y+5, r26	; 0x05
     c72:	c6 ce       	rjmp	.-628    	; 0xa00 <__stack+0x101>
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
		}
	}
	sei();
     c74:	78 94       	sei
 			if(foundRow == 0){		// If didn't find the non-ocupied row, must be the last one
 				players[5] |= active_player << (c*2);
 				players[5-1] &= ~(0b11 << (c*2));
 				playerToLed();
 			}
 			SWITCH_ACTIVE_PLAYER;		// Switch the active player if the row isn't fully occupied
     c76:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <__stack+0x381>
     c7e:	97 c1       	rjmp	.+814    	; 0xfae <__stack+0x6af>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 			//number_of_turns++;			// Increase the number of turns
 			int w = checkForWinner();	// Check for who, or none, player that one
     c86:	0e 94 fd 00 	call	0x1fa	; 0x1fa <checkForWinner>
     c8a:	90 e0       	ldi	r25, 0x00	; 0
 			
 			//Reset loop, only is activated if there is a winner or it is to be reset by software
			// TODO: Change so it uses the indicator LED instead
 			if(w!= 0){
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__stack+0x393>
     c90:	70 ce       	rjmp	.-800    	; 0x972 <__stack+0x73>
     c92:	ef ef       	ldi	r30, 0xFF	; 255
     c94:	f4 e3       	ldi	r31, 0x34	; 52
     c96:	2c e0       	ldi	r18, 0x0C	; 12
     c98:	e1 50       	subi	r30, 0x01	; 1
     c9a:	f0 40       	sbci	r31, 0x00	; 0
     c9c:	20 40       	sbci	r18, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <__stack+0x399>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <__stack+0x3a3>
     ca2:	00 00       	nop
 				_delay_ms(250);
 				for(int i=0;i<6;i++){led[i] = 0;}
     ca4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <led>
     ca8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led+0x1>
     cac:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led+0x2>
     cb0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led+0x3>
     cb4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led+0x4>
     cb8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <led+0x5>
     cbc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <led+0x6>
     cc0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <led+0x7>
     cc4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <led+0x8>
     cc8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <led+0x9>
     ccc:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <led+0xa>
     cd0:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <led+0xb>
     cd4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <led+0xc>
     cd8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <led+0xd>
     cdc:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <led+0xe>
     ce0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <led+0xf>
     ce4:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <led+0x10>
     ce8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <led+0x11>
     cec:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <led+0x12>
     cf0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <led+0x13>
     cf4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <led+0x14>
     cf8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <led+0x15>
     cfc:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <led+0x16>
     d00:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <led+0x17>
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	91 05       	cpc	r25, r1
     d08:	09 f4       	brne	.+2      	; 0xd0c <__stack+0x40d>
     d0a:	8b c2       	rjmp	.+1302   	; 0x1222 <__stack+0x923>
     d0c:	02 97       	sbiw	r24, 0x02	; 2
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__stack+0x413>
     d10:	59 c2       	rjmp	.+1202   	; 0x11c4 <__stack+0x8c5>
     d12:	85 e0       	ldi	r24, 0x05	; 5
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	3f ef       	ldi	r19, 0xFF	; 255
     d18:	47 e8       	ldi	r20, 0x87	; 135
     d1a:	63 e1       	ldi	r22, 0x13	; 19
     d1c:	31 50       	subi	r19, 0x01	; 1
     d1e:	40 40       	sbci	r20, 0x00	; 0
     d20:	60 40       	sbci	r22, 0x00	; 0
     d22:	e1 f7       	brne	.-8      	; 0xd1c <__stack+0x41d>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <__stack+0x427>
     d26:	00 00       	nop
 				// Blink thru the indicator LED
 				for(int i=0;i<5;i++){
 					if(w == 1){led[0] = 0b001001001;}
 					else if(w == 2){led[0] = 0b011011011;}
 					_delay_ms(400);
 					led[0] = 0;
     d28:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <led>
     d2c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led+0x1>
     d30:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led+0x2>
     d34:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led+0x3>
     d38:	af ef       	ldi	r26, 0xFF	; 255
     d3a:	b7 e8       	ldi	r27, 0x87	; 135
     d3c:	e3 e1       	ldi	r30, 0x13	; 19
     d3e:	a1 50       	subi	r26, 0x01	; 1
     d40:	b0 40       	sbci	r27, 0x00	; 0
     d42:	e0 40       	sbci	r30, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <__stack+0x43f>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <__stack+0x449>
     d48:	00 00       	nop
     d4a:	01 97       	sbiw	r24, 0x01	; 1
			// TODO: Change so it uses the indicator LED instead
 			if(w!= 0){
 				_delay_ms(250);
 				for(int i=0;i<6;i++){led[i] = 0;}
 				// Blink thru the indicator LED
 				for(int i=0;i<5;i++){
     d4c:	21 f7       	brne	.-56     	; 0xd16 <__stack+0x417>
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
     d4e:	89 b1       	in	r24, 0x09	; 9
     d50:	8f 3f       	cpi	r24, 0xFF	; 255
     d52:	e9 f3       	breq	.-6      	; 0xd4e <__stack+0x44f>
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     d54:	48 9b       	sbis	0x09, 0	; 9
     d56:	fb cf       	rjmp	.-10     	; 0xd4e <__stack+0x44f>
     d58:	49 9b       	sbis	0x09, 1	; 9
     d5a:	2b c1       	rjmp	.+598    	; 0xfb2 <__stack+0x6b3>
     d5c:	4a 9b       	sbis	0x09, 2	; 9
     d5e:	f7 cf       	rjmp	.-18     	; 0xd4e <__stack+0x44f>
     d60:	4b 9b       	sbis	0x09, 3	; 9
     d62:	f5 cf       	rjmp	.-22     	; 0xd4e <__stack+0x44f>
     d64:	4c 9b       	sbis	0x09, 4	; 9
     d66:	f3 cf       	rjmp	.-26     	; 0xd4e <__stack+0x44f>
     d68:	4d 9b       	sbis	0x09, 5	; 9
     d6a:	f1 cf       	rjmp	.-30     	; 0xd4e <__stack+0x44f>
     d6c:	89 b1       	in	r24, 0x09	; 9
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
     d6e:	89 b1       	in	r24, 0x09	; 9
     d70:	8f 3f       	cpi	r24, 0xFF	; 255
     d72:	69 f3       	breq	.-38     	; 0xd4e <__stack+0x44f>
     d74:	ef cf       	rjmp	.-34     	; 0xd54 <__stack+0x455>
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     d76:	6f ec       	ldi	r22, 0xCF	; 207
     d78:	7f ef       	ldi	r23, 0xFF	; 255
     d7a:	44 e0       	ldi	r20, 0x04	; 4
     d7c:	0e ce       	rjmp	.-996    	; 0x99a <__stack+0x9b>
     d7e:	63 ef       	ldi	r22, 0xF3	; 243
     d80:	7f ef       	ldi	r23, 0xFF	; 255
     d82:	42 e0       	ldi	r20, 0x02	; 2
     d84:	0a ce       	rjmp	.-1004   	; 0x99a <__stack+0x9b>
     d86:	6f e3       	ldi	r22, 0x3F	; 63
     d88:	7f ef       	ldi	r23, 0xFF	; 255
     d8a:	46 e0       	ldi	r20, 0x06	; 6
     d8c:	06 ce       	rjmp	.-1012   	; 0x99a <__stack+0x9b>
     d8e:	6f ef       	ldi	r22, 0xFF	; 255
     d90:	7c ef       	ldi	r23, 0xFC	; 252
     d92:	48 e0       	ldi	r20, 0x08	; 8
     d94:	02 ce       	rjmp	.-1020   	; 0x99a <__stack+0x9b>
     d96:	69 81       	ldd	r22, Y+1	; 0x01
     d98:	7a 81       	ldd	r23, Y+2	; 0x02
 					break;		// Break out of the for loop
 				}
 				_delay_ms(75);		// Delay for animation
 			}
 			if(foundRow == 0){		// If didn't find the non-ocupied row, must be the last one
 				players[5] |= active_player << (c*2);
     d9a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <__stack+0x4a7>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	fa 94       	dec	r15
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <__stack+0x4a3>
     daa:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <players+0xa>
     dae:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <players+0xb>
     db2:	82 2b       	or	r24, r18
     db4:	93 2b       	or	r25, r19
     db6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <players+0xb>
     dba:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <players+0xa>
 				players[5-1] &= ~(0b11 << (c*2));
     dbe:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <players+0x8>
     dc2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <players+0x9>
     dc6:	68 23       	and	r22, r24
     dc8:	79 23       	and	r23, r25
     dca:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <players+0x9>
     dce:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <players+0x8>
	}
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
     dd2:	f8 94       	cli
     dd4:	ee e1       	ldi	r30, 0x1E	; 30
     dd6:	f1 e0       	ldi	r31, 0x01	; 1
     dd8:	82 e1       	ldi	r24, 0x12	; 18
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	81 c0       	rjmp	.+258    	; 0xee4 <__stack+0x5e5>
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	09 f4       	brne	.+2      	; 0xde8 <__stack+0x4e9>
     de6:	d1 c0       	rjmp	.+418    	; 0xf8a <__stack+0x68b>
     de8:	88 e0       	ldi	r24, 0x08	; 8
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	c1 2c       	mov	r12, r1
     df2:	d1 2c       	mov	r13, r1
     df4:	e1 2c       	mov	r14, r1
     df6:	f1 2c       	mov	r15, r1
     df8:	08 e1       	ldi	r16, 0x18	; 24
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e00:	a9 01       	movw	r20, r18
     e02:	56 95       	lsr	r21
     e04:	47 95       	ror	r20
     e06:	56 95       	lsr	r21
     e08:	47 95       	ror	r20
     e0a:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     e0c:	41 30       	cpi	r20, 0x01	; 1
     e0e:	29 f0       	breq	.+10     	; 0xe1a <__stack+0x51b>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     e10:	42 30       	cpi	r20, 0x02	; 2
     e12:	09 f4       	brne	.+2      	; 0xe16 <__stack+0x517>
     e14:	c8 c0       	rjmp	.+400    	; 0xfa6 <__stack+0x6a7>
     e16:	c6 01       	movw	r24, r12
     e18:	d7 01       	movw	r26, r14
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e1a:	a9 01       	movw	r20, r18
     e1c:	52 95       	swap	r21
     e1e:	42 95       	swap	r20
     e20:	4f 70       	andi	r20, 0x0F	; 15
     e22:	45 27       	eor	r20, r21
     e24:	5f 70       	andi	r21, 0x0F	; 15
     e26:	45 27       	eor	r20, r21
     e28:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     e2a:	41 30       	cpi	r20, 0x01	; 1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <__stack+0x531>
     e2e:	8f c0       	rjmp	.+286    	; 0xf4e <__stack+0x64f>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     e30:	42 30       	cpi	r20, 0x02	; 2
     e32:	09 f4       	brne	.+2      	; 0xe36 <__stack+0x537>
     e34:	96 c0       	rjmp	.+300    	; 0xf62 <__stack+0x663>
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     e3c:	84 2b       	or	r24, r20
     e3e:	95 2b       	or	r25, r21
     e40:	a6 2b       	or	r26, r22
     e42:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e44:	a9 01       	movw	r20, r18
     e46:	00 24       	eor	r0, r0
     e48:	44 0f       	add	r20, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	00 1c       	adc	r0, r0
     e4e:	44 0f       	add	r20, r20
     e50:	55 1f       	adc	r21, r21
     e52:	00 1c       	adc	r0, r0
     e54:	45 2f       	mov	r20, r21
     e56:	50 2d       	mov	r21, r0
     e58:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     e5a:	41 30       	cpi	r20, 0x01	; 1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <__stack+0x561>
     e5e:	72 c0       	rjmp	.+228    	; 0xf44 <__stack+0x645>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     e60:	42 30       	cpi	r20, 0x02	; 2
     e62:	09 f4       	brne	.+2      	; 0xe66 <__stack+0x567>
     e64:	79 c0       	rjmp	.+242    	; 0xf58 <__stack+0x659>
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     e6c:	84 2b       	or	r24, r20
     e6e:	95 2b       	or	r25, r21
     e70:	a6 2b       	or	r26, r22
     e72:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e74:	43 2f       	mov	r20, r19
     e76:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     e78:	41 30       	cpi	r20, 0x01	; 1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <__stack+0x57f>
     e7c:	5e c0       	rjmp	.+188    	; 0xf3a <__stack+0x63b>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     e7e:	42 30       	cpi	r20, 0x02	; 2
     e80:	09 f4       	brne	.+2      	; 0xe84 <__stack+0x585>
     e82:	79 c0       	rjmp	.+242    	; 0xf76 <__stack+0x677>
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     e8a:	84 2b       	or	r24, r20
     e8c:	95 2b       	or	r25, r21
     e8e:	a6 2b       	or	r26, r22
     e90:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e92:	43 2f       	mov	r20, r19
     e94:	46 95       	lsr	r20
     e96:	46 95       	lsr	r20
     e98:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     e9a:	41 30       	cpi	r20, 0x01	; 1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <__stack+0x5a1>
     e9e:	48 c0       	rjmp	.+144    	; 0xf30 <__stack+0x631>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     ea0:	42 30       	cpi	r20, 0x02	; 2
     ea2:	09 f4       	brne	.+2      	; 0xea6 <__stack+0x5a7>
     ea4:	63 c0       	rjmp	.+198    	; 0xf6c <__stack+0x66d>
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     eac:	84 2b       	or	r24, r20
     eae:	95 2b       	or	r25, r21
     eb0:	a6 2b       	or	r26, r22
     eb2:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     eb4:	23 2f       	mov	r18, r19
     eb6:	22 95       	swap	r18
     eb8:	23 70       	andi	r18, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     eba:	21 30       	cpi	r18, 0x01	; 1
     ebc:	a1 f1       	breq	.+104    	; 0xf26 <__stack+0x627>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	09 f4       	brne	.+2      	; 0xec4 <__stack+0x5c5>
     ec2:	5e c0       	rjmp	.+188    	; 0xf80 <__stack+0x681>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     eca:	84 2b       	or	r24, r20
     ecc:	95 2b       	or	r25, r21
     ece:	a6 2b       	or	r26, r22
     ed0:	b7 2b       	or	r27, r23
     ed2:	81 93       	st	Z+, r24
     ed4:	91 93       	st	Z+, r25
     ed6:	a1 93       	st	Z+, r26
     ed8:	b1 93       	st	Z+, r27
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
     eda:	b1 e0       	ldi	r27, 0x01	; 1
     edc:	e6 33       	cpi	r30, 0x36	; 54
     ede:	fb 07       	cpc	r31, r27
     ee0:	09 f4       	brne	.+2      	; 0xee4 <__stack+0x5e5>
     ee2:	c8 ce       	rjmp	.-624    	; 0xc74 <__stack+0x375>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     ee4:	a9 81       	ldd	r26, Y+1	; 0x01
     ee6:	ba 81       	ldd	r27, Y+2	; 0x02
     ee8:	2d 91       	ld	r18, X+
     eea:	3d 91       	ld	r19, X+
     eec:	ba 83       	std	Y+2, r27	; 0x02
     eee:	a9 83       	std	Y+1, r26	; 0x01
     ef0:	82 2f       	mov	r24, r18
     ef2:	83 70       	andi	r24, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	09 f0       	breq	.+2      	; 0xefa <__stack+0x5fb>
     ef8:	74 cf       	rjmp	.-280    	; 0xde2 <__stack+0x4e3>
     efa:	89 e0       	ldi	r24, 0x09	; 9
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	cc 24       	eor	r12, r12
     f04:	c3 94       	inc	r12
     f06:	d1 2c       	mov	r13, r1
     f08:	e1 2c       	mov	r14, r1
     f0a:	f1 2c       	mov	r15, r1
     f0c:	09 e1       	ldi	r16, 0x19	; 25
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	75 cf       	rjmp	.-278    	; 0xe00 <__stack+0x501>
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     f16:	6f ef       	ldi	r22, 0xFF	; 255
     f18:	73 ef       	ldi	r23, 0xF3	; 243
     f1a:	4a e0       	ldi	r20, 0x0A	; 10
     f1c:	3e cd       	rjmp	.-1412   	; 0x99a <__stack+0x9b>
     f1e:	6f ef       	ldi	r22, 0xFF	; 255
     f20:	7f ec       	ldi	r23, 0xCF	; 207
     f22:	4c e0       	ldi	r20, 0x0C	; 12
     f24:	3a cd       	rjmp	.-1420   	; 0x99a <__stack+0x9b>
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	64 e0       	ldi	r22, 0x04	; 4
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	cd cf       	rjmp	.-102    	; 0xeca <__stack+0x5cb>
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e8       	ldi	r21, 0x80	; 128
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	b9 cf       	rjmp	.-142    	; 0xeac <__stack+0x5ad>
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e1       	ldi	r21, 0x10	; 16
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	a3 cf       	rjmp	.-186    	; 0xe8a <__stack+0x58b>
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	52 e0       	ldi	r21, 0x02	; 2
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	8f cf       	rjmp	.-226    	; 0xe6c <__stack+0x56d>
     f4e:	40 e4       	ldi	r20, 0x40	; 64
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	72 cf       	rjmp	.-284    	; 0xe3c <__stack+0x53d>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	56 e0       	ldi	r21, 0x06	; 6
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	85 cf       	rjmp	.-246    	; 0xe6c <__stack+0x56d>
     f62:	40 ec       	ldi	r20, 0xC0	; 192
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	68 cf       	rjmp	.-304    	; 0xe3c <__stack+0x53d>
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e8       	ldi	r21, 0x80	; 128
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	9b cf       	rjmp	.-202    	; 0xeac <__stack+0x5ad>
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	50 e3       	ldi	r21, 0x30	; 48
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	85 cf       	rjmp	.-246    	; 0xe8a <__stack+0x58b>
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	6c e0       	ldi	r22, 0x0C	; 12
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	a0 cf       	rjmp	.-192    	; 0xeca <__stack+0x5cb>
     f8a:	8b e0       	ldi	r24, 0x0B	; 11
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	43 e0       	ldi	r20, 0x03	; 3
     f94:	c4 2e       	mov	r12, r20
     f96:	d1 2c       	mov	r13, r1
     f98:	e1 2c       	mov	r14, r1
     f9a:	f1 2c       	mov	r15, r1
     f9c:	0b e1       	ldi	r16, 0x1B	; 27
     f9e:	10 e0       	ldi	r17, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	2d cf       	rjmp	.-422    	; 0xe00 <__stack+0x501>
     fa6:	c8 01       	movw	r24, r16
     fa8:	a7 2f       	mov	r26, r23
     faa:	b6 2f       	mov	r27, r22
     fac:	36 cf       	rjmp	.-404    	; 0xe1a <__stack+0x51b>
 			if(foundRow == 0){		// If didn't find the non-ocupied row, must be the last one
 				players[5] |= active_player << (c*2);
 				players[5-1] &= ~(0b11 << (c*2));
 				playerToLed();
 			}
 			SWITCH_ACTIVE_PLAYER;		// Switch the active player if the row isn't fully occupied
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	68 ce       	rjmp	.-816    	; 0xc82 <__stack+0x383>
 				}
 				while(1){	// Wait until button is pressed to reset game
 					int c = waitForButtonInput();
 					if(c == 1){		// If pressed the button right of the indicator
 						// Reset the variables
 						active_player = 1;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>

// TODO: Turn this into a macro
// Function to clear the buffer of an array
void clearBuffer(uint16_t *c, int array_lenght){
	for(int i=0;i<array_lenght;i++){
		c[i] = 0;
     fb8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <players+0x1>
     fbc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <players>
     fc0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <players+0x3>
     fc4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <players+0x2>
     fc8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <players+0x5>
     fcc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <players+0x4>
     fd0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <players+0x7>
     fd4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <players+0x6>
     fd8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <players+0x9>
     fdc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <players+0x8>
     fe0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <players+0xb>
     fe4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <players+0xa>
	}
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
     fe8:	f8 94       	cli
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     fea:	ab 81       	ldd	r26, Y+3	; 0x03
     fec:	bc 81       	ldd	r27, Y+4	; 0x04
     fee:	2d 91       	ld	r18, X+
     ff0:	3d 91       	ld	r19, X+
     ff2:	bc 83       	std	Y+4, r27	; 0x04
     ff4:	ab 83       	std	Y+3, r26	; 0x03
     ff6:	82 2f       	mov	r24, r18
     ff8:	83 70       	andi	r24, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <__stack+0x701>
     ffe:	d4 c0       	rjmp	.+424    	; 0x11a8 <__stack+0x8a9>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	09 f4       	brne	.+2      	; 0x1006 <__stack+0x707>
    1004:	c3 c0       	rjmp	.+390    	; 0x118c <__stack+0x88d>
    1006:	e8 e0       	ldi	r30, 0x08	; 8
    1008:	f1 2c       	mov	r15, r1
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	dc 01       	movw	r26, r24
    1014:	f8 e1       	ldi	r31, 0x18	; 24
    1016:	fd 83       	std	Y+5, r31	; 0x05
    1018:	19 82       	std	Y+1, r1	; 0x01
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    101e:	a9 01       	movw	r20, r18
    1020:	56 95       	lsr	r21
    1022:	47 95       	ror	r20
    1024:	56 95       	lsr	r21
    1026:	47 95       	ror	r20
    1028:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    102a:	41 30       	cpi	r20, 0x01	; 1
    102c:	09 f4       	brne	.+2      	; 0x1030 <__stack+0x731>
    102e:	aa c0       	rjmp	.+340    	; 0x1184 <__stack+0x885>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    1030:	42 30       	cpi	r20, 0x02	; 2
    1032:	09 f4       	brne	.+2      	; 0x1036 <__stack+0x737>
    1034:	a2 c0       	rjmp	.+324    	; 0x117a <__stack+0x87b>
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    1036:	a9 01       	movw	r20, r18
    1038:	52 95       	swap	r21
    103a:	42 95       	swap	r20
    103c:	4f 70       	andi	r20, 0x0F	; 15
    103e:	45 27       	eor	r20, r21
    1040:	5f 70       	andi	r21, 0x0F	; 15
    1042:	45 27       	eor	r20, r21
    1044:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    1046:	41 30       	cpi	r20, 0x01	; 1
    1048:	09 f4       	brne	.+2      	; 0x104c <__stack+0x74d>
    104a:	92 c0       	rjmp	.+292    	; 0x1170 <__stack+0x871>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    104c:	42 30       	cpi	r20, 0x02	; 2
    104e:	09 f4       	brne	.+2      	; 0x1052 <__stack+0x753>
    1050:	8a c0       	rjmp	.+276    	; 0x1166 <__stack+0x867>
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    1058:	84 2b       	or	r24, r20
    105a:	95 2b       	or	r25, r21
    105c:	a6 2b       	or	r26, r22
    105e:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    1060:	a9 01       	movw	r20, r18
    1062:	00 24       	eor	r0, r0
    1064:	44 0f       	add	r20, r20
    1066:	55 1f       	adc	r21, r21
    1068:	00 1c       	adc	r0, r0
    106a:	44 0f       	add	r20, r20
    106c:	55 1f       	adc	r21, r21
    106e:	00 1c       	adc	r0, r0
    1070:	45 2f       	mov	r20, r21
    1072:	50 2d       	mov	r21, r0
    1074:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    1076:	41 30       	cpi	r20, 0x01	; 1
    1078:	09 f4       	brne	.+2      	; 0x107c <__stack+0x77d>
    107a:	70 c0       	rjmp	.+224    	; 0x115c <__stack+0x85d>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    107c:	42 30       	cpi	r20, 0x02	; 2
    107e:	09 f4       	brne	.+2      	; 0x1082 <__stack+0x783>
    1080:	68 c0       	rjmp	.+208    	; 0x1152 <__stack+0x853>
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    1088:	84 2b       	or	r24, r20
    108a:	95 2b       	or	r25, r21
    108c:	a6 2b       	or	r26, r22
    108e:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    1090:	43 2f       	mov	r20, r19
    1092:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    1094:	41 30       	cpi	r20, 0x01	; 1
    1096:	09 f4       	brne	.+2      	; 0x109a <__stack+0x79b>
    1098:	57 c0       	rjmp	.+174    	; 0x1148 <__stack+0x849>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    109a:	42 30       	cpi	r20, 0x02	; 2
    109c:	09 f4       	brne	.+2      	; 0x10a0 <__stack+0x7a1>
    109e:	4f c0       	rjmp	.+158    	; 0x113e <__stack+0x83f>
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    10a6:	84 2b       	or	r24, r20
    10a8:	95 2b       	or	r25, r21
    10aa:	a6 2b       	or	r26, r22
    10ac:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    10ae:	43 2f       	mov	r20, r19
    10b0:	46 95       	lsr	r20
    10b2:	46 95       	lsr	r20
    10b4:	43 70       	andi	r20, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    10b6:	41 30       	cpi	r20, 0x01	; 1
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <__stack+0x835>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    10ba:	42 30       	cpi	r20, 0x02	; 2
    10bc:	b1 f1       	breq	.+108    	; 0x112a <__stack+0x82b>
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	ba 01       	movw	r22, r20
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    10c4:	48 2b       	or	r20, r24
    10c6:	59 2b       	or	r21, r25
    10c8:	6a 2b       	or	r22, r26
    10ca:	7b 2b       	or	r23, r27
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    10cc:	83 2f       	mov	r24, r19
    10ce:	82 95       	swap	r24
    10d0:	83 70       	andi	r24, 0x03	; 3
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	29 f1       	breq	.+74     	; 0x1120 <__stack+0x821>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	f1 f0       	breq	.+60     	; 0x1116 <__stack+0x817>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	dc 01       	movw	r26, r24
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    10e0:	48 2b       	or	r20, r24
    10e2:	59 2b       	or	r21, r25
    10e4:	6a 2b       	or	r22, r26
    10e6:	7b 2b       	or	r23, r27
    10e8:	d1 01       	movw	r26, r2
    10ea:	4d 93       	st	X+, r20
    10ec:	5d 93       	st	X+, r21
    10ee:	6d 93       	st	X+, r22
    10f0:	7d 93       	st	X+, r23
    10f2:	1d 01       	movw	r2, r26
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
    10f4:	b6 e3       	ldi	r27, 0x36	; 54
    10f6:	2b 16       	cp	r2, r27
    10f8:	b1 e0       	ldi	r27, 0x01	; 1
    10fa:	3b 06       	cpc	r3, r27
    10fc:	09 f0       	breq	.+2      	; 0x1100 <__stack+0x801>
    10fe:	75 cf       	rjmp	.-278    	; 0xfea <__stack+0x6eb>
	 			to_shift = 0b011;
 			}
			led[r] |= ((uint32_t)to_shift << (c*3));
		}
	}
	sei();
    1100:	78 94       	sei
    1102:	ef ef       	ldi	r30, 0xFF	; 255
    1104:	f9 e6       	ldi	r31, 0x69	; 105
    1106:	28 e1       	ldi	r18, 0x18	; 24
    1108:	e1 50       	subi	r30, 0x01	; 1
    110a:	f0 40       	sbci	r31, 0x00	; 0
    110c:	20 40       	sbci	r18, 0x00	; 0
    110e:	e1 f7       	brne	.-8      	; 0x1108 <__stack+0x809>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <__stack+0x813>
    1112:	00 00       	nop
    1114:	2e cc       	rjmp	.-1956   	; 0x972 <__stack+0x73>
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	ac e0       	ldi	r26, 0x0C	; 12
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e0 cf       	rjmp	.-64     	; 0x10e0 <__stack+0x7e1>
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a4 e0       	ldi	r26, 0x04	; 4
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	db cf       	rjmp	.-74     	; 0x10e0 <__stack+0x7e1>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e8       	ldi	r21, 0x80	; 128
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	c8 cf       	rjmp	.-112    	; 0x10c4 <__stack+0x7c5>
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	50 e8       	ldi	r21, 0x80	; 128
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	c3 cf       	rjmp	.-122    	; 0x10c4 <__stack+0x7c5>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	50 e3       	ldi	r21, 0x30	; 48
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	af cf       	rjmp	.-162    	; 0x10a6 <__stack+0x7a7>
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	50 e1       	ldi	r21, 0x10	; 16
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	aa cf       	rjmp	.-172    	; 0x10a6 <__stack+0x7a7>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	56 e0       	ldi	r21, 0x06	; 6
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	96 cf       	rjmp	.-212    	; 0x1088 <__stack+0x789>
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	52 e0       	ldi	r21, 0x02	; 2
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	91 cf       	rjmp	.-222    	; 0x1088 <__stack+0x789>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    1166:	40 ec       	ldi	r20, 0xC0	; 192
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	74 cf       	rjmp	.-280    	; 0x1058 <__stack+0x759>
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    1170:	40 e4       	ldi	r20, 0x40	; 64
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	6f cf       	rjmp	.-290    	; 0x1058 <__stack+0x759>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	99 81       	ldd	r25, Y+1	; 0x01
    117e:	a7 2f       	mov	r26, r23
    1180:	b6 2f       	mov	r27, r22
    1182:	59 cf       	rjmp	.-334    	; 0x1036 <__stack+0x737>
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    1184:	8e 2f       	mov	r24, r30
    1186:	9f 2d       	mov	r25, r15
    1188:	d8 01       	movw	r26, r16
    118a:	55 cf       	rjmp	.-342    	; 0x1036 <__stack+0x737>
 				to_shift = 0b001;
 			}
 			else if(playerAtLoc == 0b10){
    118c:	eb e0       	ldi	r30, 0x0B	; 11
    118e:	f1 2c       	mov	r15, r1
    1190:	00 e0       	ldi	r16, 0x00	; 0
    1192:	10 e0       	ldi	r17, 0x00	; 0
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a0 e0       	ldi	r26, 0x00	; 0
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	6b e1       	ldi	r22, 0x1B	; 27
    119e:	6d 83       	std	Y+5, r22	; 0x05
    11a0:	19 82       	std	Y+1, r1	; 0x01
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	3b cf       	rjmp	.-394    	; 0x101e <__stack+0x71f>
// 							to_shift = (c==6) ? 0b100: 0b001;
// 						}
// 						else if(playerAtLoc == 0b10){
// 							to_shift = (c==6) ? 0b110: 0b011;
// 						}
			if(playerAtLoc == 0b01){
    11a8:	e9 e0       	ldi	r30, 0x09	; 9
    11aa:	f1 2c       	mov	r15, r1
    11ac:	00 e0       	ldi	r16, 0x00	; 0
    11ae:	10 e0       	ldi	r17, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	49 e1       	ldi	r20, 0x19	; 25
    11ba:	4d 83       	std	Y+5, r20	; 0x05
    11bc:	19 82       	std	Y+1, r1	; 0x01
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	2d cf       	rjmp	.-422    	; 0x101e <__stack+0x71f>
 			
 			//Reset loop, only is activated if there is a winner or it is to be reset by software
			// TODO: Change so it uses the indicator LED instead
 			if(w!= 0){
 				_delay_ms(250);
 				for(int i=0;i<6;i++){led[i] = 0;}
    11c4:	85 e0       	ldi	r24, 0x05	; 5
    11c6:	90 e0       	ldi	r25, 0x00	; 0
 				// Blink thru the indicator LED
 				for(int i=0;i<5;i++){
 					if(w == 1){led[0] = 0b001001001;}
 					else if(w == 2){led[0] = 0b011011011;}
    11c8:	4b ed       	ldi	r20, 0xDB	; 219
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <led>
    11d4:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <led+0x1>
    11d8:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <led+0x2>
    11dc:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <led+0x3>
    11e0:	ff ef       	ldi	r31, 0xFF	; 255
    11e2:	27 e8       	ldi	r18, 0x87	; 135
    11e4:	33 e1       	ldi	r19, 0x13	; 19
    11e6:	f1 50       	subi	r31, 0x01	; 1
    11e8:	20 40       	sbci	r18, 0x00	; 0
    11ea:	30 40       	sbci	r19, 0x00	; 0
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <__stack+0x8e7>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <__stack+0x8f1>
    11f0:	00 00       	nop
 					_delay_ms(400);
 					led[0] = 0;
    11f2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <led>
    11f6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led+0x1>
    11fa:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led+0x2>
    11fe:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led+0x3>
    1202:	af ef       	ldi	r26, 0xFF	; 255
    1204:	b7 e8       	ldi	r27, 0x87	; 135
    1206:	e3 e1       	ldi	r30, 0x13	; 19
    1208:	a1 50       	subi	r26, 0x01	; 1
    120a:	b0 40       	sbci	r27, 0x00	; 0
    120c:	e0 40       	sbci	r30, 0x00	; 0
    120e:	e1 f7       	brne	.-8      	; 0x1208 <__stack+0x909>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <__stack+0x913>
    1212:	00 00       	nop
    1214:	01 97       	sbiw	r24, 0x01	; 1
			// TODO: Change so it uses the indicator LED instead
 			if(w!= 0){
 				_delay_ms(250);
 				for(int i=0;i<6;i++){led[i] = 0;}
 				// Blink thru the indicator LED
 				for(int i=0;i<5;i++){
    1216:	e1 f6       	brne	.-72     	; 0x11d0 <__stack+0x8d1>
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
    1218:	89 b1       	in	r24, 0x09	; 9
    121a:	8f 3f       	cpi	r24, 0xFF	; 255
    121c:	09 f4       	brne	.+2      	; 0x1220 <__stack+0x921>
    121e:	97 cd       	rjmp	.-1234   	; 0xd4e <__stack+0x44f>
    1220:	99 cd       	rjmp	.-1230   	; 0xd54 <__stack+0x455>
 			
 			//Reset loop, only is activated if there is a winner or it is to be reset by software
			// TODO: Change so it uses the indicator LED instead
 			if(w!= 0){
 				_delay_ms(250);
 				for(int i=0;i<6;i++){led[i] = 0;}
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	90 e0       	ldi	r25, 0x00	; 0
 				// Blink thru the indicator LED
 				for(int i=0;i<5;i++){
 					if(w == 1){led[0] = 0b001001001;}
    1226:	49 e4       	ldi	r20, 0x49	; 73
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <led>
    1232:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <led+0x1>
    1236:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <led+0x2>
    123a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <led+0x3>
    123e:	ff ef       	ldi	r31, 0xFF	; 255
    1240:	27 e8       	ldi	r18, 0x87	; 135
    1242:	33 e1       	ldi	r19, 0x13	; 19
    1244:	f1 50       	subi	r31, 0x01	; 1
    1246:	20 40       	sbci	r18, 0x00	; 0
    1248:	30 40       	sbci	r19, 0x00	; 0
    124a:	e1 f7       	brne	.-8      	; 0x1244 <__stack+0x945>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <__stack+0x94f>
    124e:	00 00       	nop
 					else if(w == 2){led[0] = 0b011011011;}
 					_delay_ms(400);
 					led[0] = 0;
    1250:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <led>
    1254:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led+0x1>
    1258:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led+0x2>
    125c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led+0x3>
    1260:	af ef       	ldi	r26, 0xFF	; 255
    1262:	b7 e8       	ldi	r27, 0x87	; 135
    1264:	e3 e1       	ldi	r30, 0x13	; 19
    1266:	a1 50       	subi	r26, 0x01	; 1
    1268:	b0 40       	sbci	r27, 0x00	; 0
    126a:	e0 40       	sbci	r30, 0x00	; 0
    126c:	e1 f7       	brne	.-8      	; 0x1266 <__stack+0x967>
    126e:	00 c0       	rjmp	.+0      	; 0x1270 <__stack+0x971>
    1270:	00 00       	nop
    1272:	01 97       	sbiw	r24, 0x01	; 1
			// TODO: Change so it uses the indicator LED instead
 			if(w!= 0){
 				_delay_ms(250);
 				for(int i=0;i<6;i++){led[i] = 0;}
 				// Blink thru the indicator LED
 				for(int i=0;i<5;i++){
    1274:	e1 f6       	brne	.-72     	; 0x122e <__stack+0x92f>
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
    1276:	89 b1       	in	r24, 0x09	; 9
    1278:	8f 3f       	cpi	r24, 0xFF	; 255
    127a:	09 f4       	brne	.+2      	; 0x127e <__stack+0x97f>
    127c:	68 cd       	rjmp	.-1328   	; 0xd4e <__stack+0x44f>
    127e:	6a cd       	rjmp	.-1324   	; 0xd54 <__stack+0x455>

00001280 <_exit>:
    1280:	f8 94       	cli

00001282 <__stop_program>:
    1282:	ff cf       	rjmp	.-2      	; 0x1282 <__stop_program>
