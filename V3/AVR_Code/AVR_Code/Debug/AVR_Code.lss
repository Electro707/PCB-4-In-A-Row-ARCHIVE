
AVR_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000129c  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000129c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800130  00800130  00001360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eec  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000837  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b31  00000000  00000000  00002b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00003674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002048  00000000  00000000  00003c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  00005c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e9       	ldi	r30, 0x9C	; 156
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 33       	cpi	r26, 0x30	; 48
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e3       	ldi	r26, 0x30	; 48
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 35       	cpi	r26, 0x5A	; 90
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 75 04 	call	0x8ea	; 0x8ea <main>
      9e:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <reset_shift_registers>:
}

// TODO: Turn this into a macro
// Function to clear the buffer of an array
void clearBuffer(uint16_t *c, int array_lenght){
	for(int i=0;i<array_lenght;i++){
      a6:	8c b5       	in	r24, 0x2c	; 44
      a8:	8f 7b       	andi	r24, 0xBF	; 191
      aa:	8c bd       	out	0x2c, r24	; 44
      ac:	24 9a       	sbi	0x04, 4	; 4
      ae:	2c 9a       	sbi	0x05, 4	; 5
      b0:	2f ef       	ldi	r18, 0xFF	; 255
      b2:	89 ef       	ldi	r24, 0xF9	; 249
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	21 50       	subi	r18, 0x01	; 1
      b8:	80 40       	sbci	r24, 0x00	; 0
      ba:	90 40       	sbci	r25, 0x00	; 0
      bc:	e1 f7       	brne	.-8      	; 0xb6 <reset_shift_registers+0x10>
      be:	00 c0       	rjmp	.+0      	; 0xc0 <reset_shift_registers+0x1a>
      c0:	00 00       	nop
      c2:	2c 98       	cbi	0x05, 4	; 5
      c4:	2f ef       	ldi	r18, 0xFF	; 255
      c6:	89 ef       	ldi	r24, 0xF9	; 249
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	21 50       	subi	r18, 0x01	; 1
      cc:	80 40       	sbci	r24, 0x00	; 0
      ce:	90 40       	sbci	r25, 0x00	; 0
      d0:	e1 f7       	brne	.-8      	; 0xca <reset_shift_registers+0x24>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <reset_shift_registers+0x2e>
      d4:	00 00       	nop
      d6:	2c 9a       	sbi	0x05, 4	; 5
      d8:	2f ef       	ldi	r18, 0xFF	; 255
      da:	89 ef       	ldi	r24, 0xF9	; 249
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	21 50       	subi	r18, 0x01	; 1
      e0:	80 40       	sbci	r24, 0x00	; 0
      e2:	90 40       	sbci	r25, 0x00	; 0
      e4:	e1 f7       	brne	.-8      	; 0xde <reset_shift_registers+0x38>
      e6:	00 c0       	rjmp	.+0      	; 0xe8 <reset_shift_registers+0x42>
      e8:	00 00       	nop
      ea:	24 98       	cbi	0x04, 4	; 4
      ec:	08 95       	ret

000000ee <__vector_16>:
      ee:	1f 92       	push	r1
      f0:	0f 92       	push	r0
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	0f 92       	push	r0
      f6:	11 24       	eor	r1, r1
      f8:	4f 93       	push	r20
      fa:	5f 93       	push	r21
      fc:	6f 93       	push	r22
      fe:	7f 93       	push	r23
     100:	8f 93       	push	r24
     102:	9f 93       	push	r25
     104:	af 93       	push	r26
     106:	bf 93       	push	r27
     108:	ef 93       	push	r30
     10a:	ff 93       	push	r31
     10c:	29 98       	cbi	0x05, 1	; 5
     10e:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <current_led>
     112:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <current_led+0x1>
     116:	aa 0f       	add	r26, r26
     118:	bb 1f       	adc	r27, r27
     11a:	aa 0f       	add	r26, r26
     11c:	bb 1f       	adc	r27, r27
     11e:	a0 50       	subi	r26, 0x00	; 0
     120:	bf 4f       	sbci	r27, 0xFF	; 255
     122:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <current_row>
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	ee 0f       	add	r30, r30
     12a:	ff 1f       	adc	r31, r31
     12c:	ee 0f       	add	r30, r30
     12e:	ff 1f       	adc	r31, r31
     130:	ee 5b       	subi	r30, 0xBE	; 190
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	4d 91       	ld	r20, X+
     136:	5d 91       	ld	r21, X+
     138:	6d 91       	ld	r22, X+
     13a:	7c 91       	ld	r23, X
     13c:	80 81       	ld	r24, Z
     13e:	91 81       	ldd	r25, Z+1	; 0x01
     140:	a2 81       	ldd	r26, Z+2	; 0x02
     142:	b3 81       	ldd	r27, Z+3	; 0x03
     144:	84 23       	and	r24, r20
     146:	95 23       	and	r25, r21
     148:	a6 23       	and	r26, r22
     14a:	b7 23       	and	r27, r23
     14c:	ad 01       	movw	r20, r26
     14e:	66 27       	eor	r22, r22
     150:	77 27       	eor	r23, r23
     152:	4e bd       	out	0x2e, r20	; 46
     154:	0d b4       	in	r0, 0x2d	; 45
     156:	07 fe       	sbrs	r0, 7
     158:	fd cf       	rjmp	.-6      	; 0x154 <__vector_16+0x66>
     15a:	49 2f       	mov	r20, r25
     15c:	5a 2f       	mov	r21, r26
     15e:	6b 2f       	mov	r22, r27
     160:	77 27       	eor	r23, r23
     162:	4e bd       	out	0x2e, r20	; 46
     164:	0d b4       	in	r0, 0x2d	; 45
     166:	07 fe       	sbrs	r0, 7
     168:	fd cf       	rjmp	.-6      	; 0x164 <__vector_16+0x76>
     16a:	8e bd       	out	0x2e, r24	; 46
     16c:	0d b4       	in	r0, 0x2d	; 45
     16e:	07 fe       	sbrs	r0, 7
     170:	fd cf       	rjmp	.-6      	; 0x16c <__vector_16+0x7e>
     172:	29 9a       	sbi	0x05, 1	; 5
     174:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <current_led>
     178:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <current_led+0x1>
     17c:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <current_led+0x2>
     180:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <current_led+0x3>
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	a1 1d       	adc	r26, r1
     188:	b1 1d       	adc	r27, r1
     18a:	8c 30       	cpi	r24, 0x0C	; 12
     18c:	91 05       	cpc	r25, r1
     18e:	a1 05       	cpc	r26, r1
     190:	b1 05       	cpc	r27, r1
     192:	b9 f0       	breq	.+46     	; 0x1c2 <__vector_16+0xd4>
     194:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <current_led>
     198:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <current_led+0x1>
     19c:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <current_led+0x2>
     1a0:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <current_led+0x3>
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	bf 91       	pop	r27
     1aa:	af 91       	pop	r26
     1ac:	9f 91       	pop	r25
     1ae:	8f 91       	pop	r24
     1b0:	7f 91       	pop	r23
     1b2:	6f 91       	pop	r22
     1b4:	5f 91       	pop	r21
     1b6:	4f 91       	pop	r20
     1b8:	0f 90       	pop	r0
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	0f 90       	pop	r0
     1be:	1f 90       	pop	r1
     1c0:	18 95       	reti
     1c2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <current_led>
     1c6:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <current_led+0x1>
     1ca:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <current_led+0x2>
     1ce:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <current_led+0x3>
     1d2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_row>
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	86 30       	cpi	r24, 0x06	; 6
     1da:	51 f0       	breq	.+20     	; 0x1f0 <__vector_16+0x102>
     1dc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <current_row>
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <__vector_16+0xf8>
     1e4:	99 0f       	add	r25, r25
     1e6:	8a 95       	dec	r24
     1e8:	ea f7       	brpl	.-6      	; 0x1e4 <__vector_16+0xf6>
     1ea:	89 2f       	mov	r24, r25
     1ec:	87 b9       	out	0x07, r24	; 7
     1ee:	da cf       	rjmp	.-76     	; 0x1a4 <__vector_16+0xb6>
     1f0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <current_row>
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	87 b9       	out	0x07, r24	; 7
     1f8:	d5 cf       	rjmp	.-86     	; 0x1a4 <__vector_16+0xb6>

000001fa <checkForWinner>:
}


// Function to check for a game winner
// Returns 0 if none, 1 for player 1, and 2 for player 2
uint8_t checkForWinner(void){
     1fa:	3f 92       	push	r3
     1fc:	4f 92       	push	r4
     1fe:	5f 92       	push	r5
     200:	6f 92       	push	r6
     202:	7f 92       	push	r7
     204:	8f 92       	push	r8
     206:	9f 92       	push	r9
     208:	af 92       	push	r10
     20a:	bf 92       	push	r11
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	a0 90 36 01 	lds	r10, 0x0136	; 0x800136 <players>
     220:	b0 90 37 01 	lds	r11, 0x0137	; 0x800137 <players+0x1>
     224:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <players+0x2>
     228:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <players+0x3>
     22c:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <players+0x4>
     230:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <players+0x5>
     234:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <players+0x6>
     238:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <players+0x7>
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     23c:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <players+0x8>
     240:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <players+0x9>
     244:	80 90 40 01 	lds	r8, 0x0140	; 0x800140 <players+0xa>
     248:	90 90 41 01 	lds	r9, 0x0141	; 0x800141 <players+0xb>
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	f8 2e       	mov	r15, r24
     252:	85 01       	movw	r16, r10
     254:	08 2e       	mov	r0, r24
     256:	02 c0       	rjmp	.+4      	; 0x25c <checkForWinner+0x62>
     258:	16 95       	lsr	r17
     25a:	07 95       	ror	r16
     25c:	0a 94       	dec	r0
     25e:	e2 f7       	brpl	.-8      	; 0x258 <checkForWinner+0x5e>
     260:	bf 01       	movw	r22, r30
     262:	08 2e       	mov	r0, r24
     264:	02 c0       	rjmp	.+4      	; 0x26a <checkForWinner+0x70>
     266:	76 95       	lsr	r23
     268:	67 95       	ror	r22
     26a:	0a 94       	dec	r0
     26c:	e2 f7       	brpl	.-8      	; 0x266 <checkForWinner+0x6c>
     26e:	e8 01       	movw	r28, r16
     270:	c6 27       	eor	r28, r22
     272:	d7 27       	eor	r29, r23
     274:	c3 70       	andi	r28, 0x03	; 3
     276:	dd 27       	eor	r29, r29
     278:	cd 2b       	or	r28, r29
     27a:	09 f0       	breq	.+2      	; 0x27e <checkForWinner+0x84>
     27c:	d8 c2       	rjmp	.+1456   	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     27e:	03 70       	andi	r16, 0x03	; 3
     280:	11 27       	eor	r17, r17
     282:	ee 24       	eor	r14, r14
     284:	e3 94       	inc	r14
     286:	01 2b       	or	r16, r17
     288:	09 f4       	brne	.+2      	; 0x28c <checkForWinner+0x92>
     28a:	d1 c2       	rjmp	.+1442   	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     28c:	8a 01       	movw	r16, r20
     28e:	0f 2c       	mov	r0, r15
     290:	02 c0       	rjmp	.+4      	; 0x296 <checkForWinner+0x9c>
     292:	16 95       	lsr	r17
     294:	07 95       	ror	r16
     296:	0a 94       	dec	r0
     298:	e2 f7       	brpl	.-8      	; 0x292 <checkForWinner+0x98>
     29a:	eb 01       	movw	r28, r22
     29c:	c0 27       	eor	r28, r16
     29e:	d1 27       	eor	r29, r17
     2a0:	c3 70       	andi	r28, 0x03	; 3
     2a2:	dd 27       	eor	r29, r29
     2a4:	cd 2b       	or	r28, r29
     2a6:	09 f0       	breq	.+2      	; 0x2aa <checkForWinner+0xb0>
     2a8:	d2 c2       	rjmp	.+1444   	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     2aa:	63 70       	andi	r22, 0x03	; 3
     2ac:	77 27       	eor	r23, r23
     2ae:	67 2b       	or	r22, r23
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <checkForWinner+0xba>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     2b2:	e3 94       	inc	r14
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     2b4:	e9 01       	movw	r28, r18
     2b6:	0f 2c       	mov	r0, r15
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <checkForWinner+0xc4>
     2ba:	d6 95       	lsr	r29
     2bc:	c7 95       	ror	r28
     2be:	0a 94       	dec	r0
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <checkForWinner+0xc0>
     2c2:	b8 01       	movw	r22, r16
     2c4:	6c 27       	eor	r22, r28
     2c6:	7d 27       	eor	r23, r29
     2c8:	63 70       	andi	r22, 0x03	; 3
     2ca:	77 27       	eor	r23, r23
     2cc:	67 2b       	or	r22, r23
     2ce:	09 f0       	breq	.+2      	; 0x2d2 <checkForWinner+0xd8>
     2d0:	c0 c2       	rjmp	.+1408   	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     2d2:	b8 01       	movw	r22, r16
     2d4:	63 70       	andi	r22, 0x03	; 3
     2d6:	77 27       	eor	r23, r23
     2d8:	67 2b       	or	r22, r23
     2da:	29 f0       	breq	.+10     	; 0x2e6 <checkForWinner+0xec>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     2dc:	e3 94       	inc	r14
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     2de:	63 e0       	ldi	r22, 0x03	; 3
     2e0:	e6 16       	cp	r14, r22
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <checkForWinner+0xec>
     2e4:	ce c2       	rjmp	.+1436   	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     2e6:	8d 01       	movw	r16, r26
     2e8:	0f 2c       	mov	r0, r15
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <checkForWinner+0xf6>
     2ec:	16 95       	lsr	r17
     2ee:	07 95       	ror	r16
     2f0:	0a 94       	dec	r0
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <checkForWinner+0xf2>
     2f4:	be 01       	movw	r22, r28
     2f6:	60 27       	eor	r22, r16
     2f8:	71 27       	eor	r23, r17
     2fa:	63 70       	andi	r22, 0x03	; 3
     2fc:	77 27       	eor	r23, r23
     2fe:	67 2b       	or	r22, r23
     300:	09 f0       	breq	.+2      	; 0x304 <checkForWinner+0x10a>
     302:	a9 c2       	rjmp	.+1362   	; 0x856 <__LOCK_REGION_LENGTH__+0x456>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     304:	be 01       	movw	r22, r28
     306:	63 70       	andi	r22, 0x03	; 3
     308:	77 27       	eor	r23, r23
     30a:	67 2b       	or	r22, r23
     30c:	29 f0       	breq	.+10     	; 0x318 <checkForWinner+0x11e>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     30e:	e3 94       	inc	r14
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     310:	63 e0       	ldi	r22, 0x03	; 3
     312:	e6 16       	cp	r14, r22
     314:	09 f4       	brne	.+2      	; 0x318 <checkForWinner+0x11e>
     316:	b9 c2       	rjmp	.+1394   	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
     318:	b4 01       	movw	r22, r8
     31a:	02 c0       	rjmp	.+4      	; 0x320 <checkForWinner+0x126>
     31c:	76 95       	lsr	r23
     31e:	67 95       	ror	r22
     320:	fa 94       	dec	r15
     322:	e2 f7       	brpl	.-8      	; 0x31c <checkForWinner+0x122>
     324:	60 27       	eor	r22, r16
     326:	71 27       	eor	r23, r17
     328:	63 70       	andi	r22, 0x03	; 3
     32a:	77 27       	eor	r23, r23
     32c:	67 2b       	or	r22, r23
     32e:	49 f4       	brne	.+18     	; 0x342 <checkForWinner+0x148>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     330:	b8 01       	movw	r22, r16
     332:	63 70       	andi	r22, 0x03	; 3
     334:	77 27       	eor	r23, r23
     336:	67 2b       	or	r22, r23
     338:	21 f0       	breq	.+8      	; 0x342 <checkForWinner+0x148>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     33a:	c2 e0       	ldi	r28, 0x02	; 2
     33c:	ec 16       	cp	r14, r28
     33e:	09 f4       	brne	.+2      	; 0x342 <checkForWinner+0x148>
     340:	a8 c2       	rjmp	.+1360   	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     342:	02 96       	adiw	r24, 0x02	; 2
// Function to check for a game winner
// Returns 0 if none, 1 for player 1, and 2 for player 2
uint8_t checkForWinner(void){
	uint8_t winner_player = 0;
	// Check vertical
	for(int c=0;c<7;c++){		// Check every column
     344:	8e 30       	cpi	r24, 0x0E	; 14
     346:	91 05       	cpc	r25, r1
     348:	09 f0       	breq	.+2      	; 0x34c <checkForWinner+0x152>
     34a:	82 cf       	rjmp	.-252    	; 0x250 <checkForWinner+0x56>


// Function to check for a game winner
// Returns 0 if none, 1 for player 1, and 2 for player 2
uint8_t checkForWinner(void){
	uint8_t winner_player = 0;
     34c:	31 2c       	mov	r3, r1
     34e:	86 e3       	ldi	r24, 0x36	; 54
     350:	c8 2e       	mov	r12, r24
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	d8 2e       	mov	r13, r24
     356:	92 e4       	ldi	r25, 0x42	; 66
     358:	69 2e       	mov	r6, r25
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	79 2e       	mov	r7, r25
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     35e:	e6 01       	movw	r28, r12
     360:	89 91       	ld	r24, Y+
     362:	99 91       	ld	r25, Y+
     364:	6e 01       	movw	r12, r28
     366:	ec 01       	movw	r28, r24
     368:	d6 95       	lsr	r29
     36a:	c7 95       	ror	r28
     36c:	d6 95       	lsr	r29
     36e:	c7 95       	ror	r28
     370:	bc 01       	movw	r22, r24
     372:	6c 27       	eor	r22, r28
     374:	7d 27       	eor	r23, r29
     376:	63 70       	andi	r22, 0x03	; 3
     378:	77 27       	eor	r23, r23
     37a:	67 2b       	or	r22, r23
     37c:	09 f0       	breq	.+2      	; 0x380 <checkForWinner+0x186>
     37e:	59 c2       	rjmp	.+1202   	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	8c 01       	movw	r16, r24
     384:	03 70       	andi	r16, 0x03	; 3
     386:	11 27       	eor	r17, r17
     388:	01 2b       	or	r16, r17
     38a:	09 f4       	brne	.+2      	; 0x38e <checkForWinner+0x194>
     38c:	52 c2       	rjmp	.+1188   	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     38e:	7c 01       	movw	r14, r24
     390:	f2 94       	swap	r15
     392:	e2 94       	swap	r14
     394:	1f e0       	ldi	r17, 0x0F	; 15
     396:	e1 22       	and	r14, r17
     398:	ef 24       	eor	r14, r15
     39a:	f1 22       	and	r15, r17
     39c:	ef 24       	eor	r14, r15
     39e:	8e 01       	movw	r16, r28
     3a0:	0e 25       	eor	r16, r14
     3a2:	1f 25       	eor	r17, r15
     3a4:	03 70       	andi	r16, 0x03	; 3
     3a6:	11 27       	eor	r17, r17
     3a8:	01 2b       	or	r16, r17
     3aa:	09 f0       	breq	.+2      	; 0x3ae <checkForWinner+0x1b4>
     3ac:	56 c2       	rjmp	.+1196   	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     3ae:	c3 70       	andi	r28, 0x03	; 3
     3b0:	dd 27       	eor	r29, r29
     3b2:	cd 2b       	or	r28, r29
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <checkForWinner+0x1be>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     3b6:	6f 5f       	subi	r22, 0xFF	; 255
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     3b8:	8c 01       	movw	r16, r24
     3ba:	00 24       	eor	r0, r0
     3bc:	00 0f       	add	r16, r16
     3be:	11 1f       	adc	r17, r17
     3c0:	00 1c       	adc	r0, r0
     3c2:	00 0f       	add	r16, r16
     3c4:	11 1f       	adc	r17, r17
     3c6:	00 1c       	adc	r0, r0
     3c8:	01 2f       	mov	r16, r17
     3ca:	10 2d       	mov	r17, r0
     3cc:	e7 01       	movw	r28, r14
     3ce:	c0 27       	eor	r28, r16
     3d0:	d1 27       	eor	r29, r17
     3d2:	c3 70       	andi	r28, 0x03	; 3
     3d4:	dd 27       	eor	r29, r29
     3d6:	cd 2b       	or	r28, r29
     3d8:	09 f0       	breq	.+2      	; 0x3dc <checkForWinner+0x1e2>
     3da:	41 c2       	rjmp	.+1154   	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     3dc:	e7 01       	movw	r28, r14
     3de:	c3 70       	andi	r28, 0x03	; 3
     3e0:	dd 27       	eor	r29, r29
     3e2:	cd 2b       	or	r28, r29
     3e4:	21 f0       	breq	.+8      	; 0x3ee <checkForWinner+0x1f4>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     3e6:	6f 5f       	subi	r22, 0xFF	; 255
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     3e8:	63 30       	cpi	r22, 0x03	; 3
     3ea:	09 f4       	brne	.+2      	; 0x3ee <checkForWinner+0x1f4>
     3ec:	56 c2       	rjmp	.+1196   	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     3ee:	e9 2e       	mov	r14, r25
     3f0:	ff 24       	eor	r15, r15
     3f2:	e8 01       	movw	r28, r16
     3f4:	ce 25       	eor	r28, r14
     3f6:	df 25       	eor	r29, r15
     3f8:	c3 70       	andi	r28, 0x03	; 3
     3fa:	dd 27       	eor	r29, r29
     3fc:	cd 2b       	or	r28, r29
     3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	30 c2       	rjmp	.+1120   	; 0x862 <__LOCK_REGION_LENGTH__+0x462>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     402:	e8 01       	movw	r28, r16
     404:	c3 70       	andi	r28, 0x03	; 3
     406:	dd 27       	eor	r29, r29
     408:	cd 2b       	or	r28, r29
     40a:	21 f0       	breq	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     40c:	6f 5f       	subi	r22, 0xFF	; 255
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     40e:	63 30       	cpi	r22, 0x03	; 3
     410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	47 c2       	rjmp	.+1166   	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     414:	8c 01       	movw	r16, r24
     416:	01 2f       	mov	r16, r17
     418:	11 27       	eor	r17, r17
     41a:	06 95       	lsr	r16
     41c:	06 95       	lsr	r16
     41e:	e7 01       	movw	r28, r14
     420:	c0 27       	eor	r28, r16
     422:	d1 27       	eor	r29, r17
     424:	c3 70       	andi	r28, 0x03	; 3
     426:	dd 27       	eor	r29, r29
     428:	cd 2b       	or	r28, r29
     42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	1c c2       	rjmp	.+1080   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     42e:	e7 01       	movw	r28, r14
     430:	c3 70       	andi	r28, 0x03	; 3
     432:	dd 27       	eor	r29, r29
     434:	cd 2b       	or	r28, r29
     436:	21 f0       	breq	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
     438:	6f 5f       	subi	r22, 0xFF	; 255
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     43a:	63 30       	cpi	r22, 0x03	; 3
     43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	35 c2       	rjmp	.+1130   	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     440:	89 2f       	mov	r24, r25
     442:	99 27       	eor	r25, r25
     444:	82 95       	swap	r24
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	80 27       	eor	r24, r16
     44a:	91 27       	eor	r25, r17
     44c:	83 70       	andi	r24, 0x03	; 3
     44e:	99 27       	eor	r25, r25
     450:	89 2b       	or	r24, r25
     452:	41 f4       	brne	.+16     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     454:	c8 01       	movw	r24, r16
     456:	83 70       	andi	r24, 0x03	; 3
     458:	99 27       	eor	r25, r25
     45a:	89 2b       	or	r24, r25
     45c:	19 f0       	breq	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
					similarCounter++;							// Increment counter
					if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     45e:	62 30       	cpi	r22, 0x02	; 2
     460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	27 c2       	rjmp	.+1102   	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
			break;
		}
	}

	// Check horizontal
	for(int r=0;r<6;r++){		// Check every row
     464:	6c 14       	cp	r6, r12
     466:	7d 04       	cpc	r7, r13
     468:	09 f0       	breq	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46a:	79 cf       	rjmp	.-270    	; 0x35e <checkForWinner+0x164>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     470:	58 2e       	mov	r5, r24
     472:	79 01       	movw	r14, r18
     474:	08 2e       	mov	r0, r24
     476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     478:	f6 94       	lsr	r15
     47a:	e7 94       	ror	r14
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     480:	bc 01       	movw	r22, r24
     482:	6e 5f       	subi	r22, 0xFE	; 254
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	ea 01       	movw	r28, r20
     488:	06 2e       	mov	r0, r22
     48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48c:	d6 95       	lsr	r29
     48e:	c7 95       	ror	r28
     490:	0a 94       	dec	r0
     492:	e2 f7       	brpl	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     494:	87 01       	movw	r16, r14
     496:	0c 27       	eor	r16, r28
     498:	1d 27       	eor	r17, r29
     49a:	03 70       	andi	r16, 0x03	; 3
     49c:	11 27       	eor	r17, r17
     49e:	01 2b       	or	r16, r17
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a2:	c9 c1       	rjmp	.+914    	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     4a4:	13 e0       	ldi	r17, 0x03	; 3
     4a6:	e1 22       	and	r14, r17
     4a8:	ff 24       	eor	r15, r15
     4aa:	44 24       	eor	r4, r4
     4ac:	43 94       	inc	r4
     4ae:	ef 28       	or	r14, r15
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	c1 c1       	rjmp	.+898    	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
     4b4:	6c 01       	movw	r12, r24
     4b6:	14 e0       	ldi	r17, 0x04	; 4
     4b8:	c1 0e       	add	r12, r17
     4ba:	d1 1c       	adc	r13, r1
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     4bc:	7f 01       	movw	r14, r30
     4be:	0c 2c       	mov	r0, r12
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c2:	f6 94       	lsr	r15
     4c4:	e7 94       	ror	r14
     4c6:	0a 94       	dec	r0
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4ca:	8e 01       	movw	r16, r28
     4cc:	0e 25       	eor	r16, r14
     4ce:	1f 25       	eor	r17, r15
     4d0:	03 70       	andi	r16, 0x03	; 3
     4d2:	11 27       	eor	r17, r17
     4d4:	01 2b       	or	r16, r17
     4d6:	09 f0       	breq	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d8:	c8 c1       	rjmp	.+912    	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     4da:	c3 70       	andi	r28, 0x03	; 3
     4dc:	dd 27       	eor	r29, r29
     4de:	cd 2b       	or	r28, r29
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     4e2:	43 94       	inc	r4
     4e4:	3c 01       	movw	r6, r24
     4e6:	c6 e0       	ldi	r28, 0x06	; 6
     4e8:	6c 0e       	add	r6, r28
     4ea:	71 1c       	adc	r7, r1
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     4ec:	c5 01       	movw	r24, r10
     4ee:	06 2c       	mov	r0, r6
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4f2:	96 95       	lsr	r25
     4f4:	87 95       	ror	r24
     4f6:	0a 94       	dec	r0
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4fa:	8e 25       	eor	r24, r14
     4fc:	9f 25       	eor	r25, r15
     4fe:	83 70       	andi	r24, 0x03	; 3
     500:	99 27       	eor	r25, r25
     502:	89 2b       	or	r24, r25
     504:	49 f4       	brne	.+18     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     506:	c7 01       	movw	r24, r14
     508:	83 70       	andi	r24, 0x03	; 3
     50a:	99 27       	eor	r25, r25
     50c:	89 2b       	or	r24, r25
     50e:	21 f0       	breq	.+8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     510:	d2 e0       	ldi	r29, 0x02	; 2
     512:	4d 16       	cp	r4, r29
     514:	09 f4       	brne	.+2      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     516:	d5 c1       	rjmp	.+938    	; 0x8c2 <__LOCK_REGION_LENGTH__+0x4c2>
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     518:	8d 01       	movw	r16, r26
     51a:	05 2c       	mov	r0, r5
     51c:	02 c0       	rjmp	.+4      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     51e:	16 95       	lsr	r17
     520:	07 95       	ror	r16
     522:	0a 94       	dec	r0
     524:	e2 f7       	brpl	.-8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     526:	c9 01       	movw	r24, r18
     528:	06 2e       	mov	r0, r22
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52c:	96 95       	lsr	r25
     52e:	87 95       	ror	r24
     530:	0a 94       	dec	r0
     532:	e2 f7       	brpl	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     534:	e8 01       	movw	r28, r16
     536:	c8 27       	eor	r28, r24
     538:	d9 27       	eor	r29, r25
     53a:	c3 70       	andi	r28, 0x03	; 3
     53c:	dd 27       	eor	r29, r29
     53e:	cd 2b       	or	r28, r29
     540:	09 f0       	breq	.+2      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     542:	7b c1       	rjmp	.+758    	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     544:	03 70       	andi	r16, 0x03	; 3
     546:	11 27       	eor	r17, r17
     548:	ff 24       	eor	r15, r15
     54a:	f3 94       	inc	r15
     54c:	01 2b       	or	r16, r17
     54e:	09 f4       	brne	.+2      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     550:	74 c1       	rjmp	.+744    	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     552:	8a 01       	movw	r16, r20
     554:	0c 2c       	mov	r0, r12
     556:	02 c0       	rjmp	.+4      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     558:	16 95       	lsr	r17
     55a:	07 95       	ror	r16
     55c:	0a 94       	dec	r0
     55e:	e2 f7       	brpl	.-8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     560:	ec 01       	movw	r28, r24
     562:	c0 27       	eor	r28, r16
     564:	d1 27       	eor	r29, r17
     566:	c3 70       	andi	r28, 0x03	; 3
     568:	dd 27       	eor	r29, r29
     56a:	cd 2b       	or	r28, r29
     56c:	09 f0       	breq	.+2      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     56e:	81 c1       	rjmp	.+770    	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     570:	83 70       	andi	r24, 0x03	; 3
     572:	99 27       	eor	r25, r25
     574:	89 2b       	or	r24, r25
     576:	09 f0       	breq	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     578:	f3 94       	inc	r15
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     57a:	cf 01       	movw	r24, r30
     57c:	06 2c       	mov	r0, r6
     57e:	02 c0       	rjmp	.+4      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     580:	96 95       	lsr	r25
     582:	87 95       	ror	r24
     584:	0a 94       	dec	r0
     586:	e2 f7       	brpl	.-8      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     588:	80 27       	eor	r24, r16
     58a:	91 27       	eor	r25, r17
     58c:	83 70       	andi	r24, 0x03	; 3
     58e:	99 27       	eor	r25, r25
     590:	89 2b       	or	r24, r25
     592:	49 f4       	brne	.+18     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     594:	c8 01       	movw	r24, r16
     596:	83 70       	andi	r24, 0x03	; 3
     598:	99 27       	eor	r25, r25
     59a:	89 2b       	or	r24, r25
     59c:	21 f0       	breq	.+8      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	f8 16       	cp	r15, r24
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5a4:	92 c1       	rjmp	.+804    	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     5a6:	84 01       	movw	r16, r8
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5aa:	16 95       	lsr	r17
     5ac:	07 95       	ror	r16
     5ae:	5a 94       	dec	r5
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5b2:	cd 01       	movw	r24, r26
     5b4:	06 2e       	mov	r0, r22
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5b8:	96 95       	lsr	r25
     5ba:	87 95       	ror	r24
     5bc:	0a 94       	dec	r0
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5c0:	e8 01       	movw	r28, r16
     5c2:	c8 27       	eor	r28, r24
     5c4:	d9 27       	eor	r29, r25
     5c6:	c3 70       	andi	r28, 0x03	; 3
     5c8:	dd 27       	eor	r29, r29
     5ca:	cd 2b       	or	r28, r29
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     5ce:	3d c1       	rjmp	.+634    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     5d0:	e8 01       	movw	r28, r16
     5d2:	c3 70       	andi	r28, 0x03	; 3
     5d4:	dd 27       	eor	r29, r29
     5d6:	ff 24       	eor	r15, r15
     5d8:	f3 94       	inc	r15
     5da:	cd 2b       	or	r28, r29
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5de:	35 c1       	rjmp	.+618    	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     5e0:	89 01       	movw	r16, r18
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5e4:	16 95       	lsr	r17
     5e6:	07 95       	ror	r16
     5e8:	ca 94       	dec	r12
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5ec:	ec 01       	movw	r28, r24
     5ee:	c0 27       	eor	r28, r16
     5f0:	d1 27       	eor	r29, r17
     5f2:	c3 70       	andi	r28, 0x03	; 3
     5f4:	dd 27       	eor	r29, r29
     5f6:	cd 2b       	or	r28, r29
     5f8:	09 f0       	breq	.+2      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     5fa:	3f c1       	rjmp	.+638    	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     5fc:	83 70       	andi	r24, 0x03	; 3
     5fe:	99 27       	eor	r25, r25
     600:	89 2b       	or	r24, r25
     602:	09 f0       	breq	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     604:	f3 94       	inc	r15
	for(int c=0;c<4;c++){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     606:	ca 01       	movw	r24, r20
     608:	02 c0       	rjmp	.+4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	6a 94       	dec	r6
     610:	e2 f7       	brpl	.-8      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     612:	80 27       	eor	r24, r16
     614:	91 27       	eor	r25, r17
     616:	83 70       	andi	r24, 0x03	; 3
     618:	99 27       	eor	r25, r25
     61a:	89 2b       	or	r24, r25
     61c:	49 f4       	brne	.+18     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     61e:	c8 01       	movw	r24, r16
     620:	83 70       	andi	r24, 0x03	; 3
     622:	99 27       	eor	r25, r25
     624:	89 2b       	or	r24, r25
     626:	21 f0       	breq	.+8      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     628:	d2 e0       	ldi	r29, 0x02	; 2
     62a:	fd 16       	cp	r15, r29
     62c:	09 f4       	brne	.+2      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     62e:	55 c1       	rjmp	.+682    	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
     630:	cb 01       	movw	r24, r22
		}
	}

	// Check diagonal (positive slope)
	// Check 4 diagonal in a row from the last 3 row and the first 4 column ( the only combination)
	for(int c=0;c<4;c++){
     632:	68 30       	cpi	r22, 0x08	; 8
     634:	71 05       	cpc	r23, r1
     636:	09 f0       	breq	.+2      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     638:	1b cf       	rjmp	.-458    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     63a:	8c e0       	ldi	r24, 0x0C	; 12
     63c:	90 e0       	ldi	r25, 0x00	; 0
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     63e:	58 2e       	mov	r5, r24
     640:	79 01       	movw	r14, r18
     642:	08 2e       	mov	r0, r24
     644:	02 c0       	rjmp	.+4      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     646:	f6 94       	lsr	r15
     648:	e7 94       	ror	r14
     64a:	0a 94       	dec	r0
     64c:	e2 f7       	brpl	.-8      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     64e:	bc 01       	movw	r22, r24
     650:	62 50       	subi	r22, 0x02	; 2
     652:	71 09       	sbc	r23, r1
     654:	ea 01       	movw	r28, r20
     656:	06 2e       	mov	r0, r22
     658:	02 c0       	rjmp	.+4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
     65a:	d6 95       	lsr	r29
     65c:	c7 95       	ror	r28
     65e:	0a 94       	dec	r0
     660:	e2 f7       	brpl	.-8      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     662:	8e 01       	movw	r16, r28
     664:	0e 25       	eor	r16, r14
     666:	1f 25       	eor	r17, r15
     668:	03 70       	andi	r16, 0x03	; 3
     66a:	11 27       	eor	r17, r17
     66c:	01 2b       	or	r16, r17
     66e:	09 f0       	breq	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     670:	e6 c0       	rjmp	.+460    	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     672:	13 e0       	ldi	r17, 0x03	; 3
     674:	e1 22       	and	r14, r17
     676:	ff 24       	eor	r15, r15
     678:	44 24       	eor	r4, r4
     67a:	43 94       	inc	r4
     67c:	ef 28       	or	r14, r15
     67e:	09 f4       	brne	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     680:	de c0       	rjmp	.+444    	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     682:	6c 01       	movw	r12, r24
     684:	14 e0       	ldi	r17, 0x04	; 4
     686:	c1 1a       	sub	r12, r17
     688:	d1 08       	sbc	r13, r1
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     68a:	7f 01       	movw	r14, r30
     68c:	0c 2c       	mov	r0, r12
     68e:	02 c0       	rjmp	.+4      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     690:	f6 94       	lsr	r15
     692:	e7 94       	ror	r14
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     698:	8e 01       	movw	r16, r28
     69a:	0e 25       	eor	r16, r14
     69c:	1f 25       	eor	r17, r15
     69e:	03 70       	andi	r16, 0x03	; 3
     6a0:	11 27       	eor	r17, r17
     6a2:	01 2b       	or	r16, r17
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
     6a6:	e3 c0       	rjmp	.+454    	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     6a8:	c3 70       	andi	r28, 0x03	; 3
     6aa:	dd 27       	eor	r29, r29
     6ac:	cd 2b       	or	r28, r29
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     6b0:	43 94       	inc	r4
     6b2:	3c 01       	movw	r6, r24
     6b4:	c6 e0       	ldi	r28, 0x06	; 6
     6b6:	6c 1a       	sub	r6, r28
     6b8:	71 08       	sbc	r7, r1
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     6ba:	c5 01       	movw	r24, r10
     6bc:	06 2c       	mov	r0, r6
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     6c0:	96 95       	lsr	r25
     6c2:	87 95       	ror	r24
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6c8:	8e 25       	eor	r24, r14
     6ca:	9f 25       	eor	r25, r15
     6cc:	83 70       	andi	r24, 0x03	; 3
     6ce:	99 27       	eor	r25, r25
     6d0:	89 2b       	or	r24, r25
     6d2:	49 f4       	brne	.+18     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     6d4:	c7 01       	movw	r24, r14
     6d6:	83 70       	andi	r24, 0x03	; 3
     6d8:	99 27       	eor	r25, r25
     6da:	89 2b       	or	r24, r25
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     6de:	d2 e0       	ldi	r29, 0x02	; 2
     6e0:	4d 16       	cp	r4, r29
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6e4:	ea c0       	rjmp	.+468    	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     6e6:	8d 01       	movw	r16, r26
     6e8:	05 2c       	mov	r0, r5
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     6ec:	16 95       	lsr	r17
     6ee:	07 95       	ror	r16
     6f0:	0a 94       	dec	r0
     6f2:	e2 f7       	brpl	.-8      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6f4:	c9 01       	movw	r24, r18
     6f6:	06 2e       	mov	r0, r22
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     6fa:	96 95       	lsr	r25
     6fc:	87 95       	ror	r24
     6fe:	0a 94       	dec	r0
     700:	e2 f7       	brpl	.-8      	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     702:	e8 01       	movw	r28, r16
     704:	c8 27       	eor	r28, r24
     706:	d9 27       	eor	r29, r25
     708:	c3 70       	andi	r28, 0x03	; 3
     70a:	dd 27       	eor	r29, r29
     70c:	cd 2b       	or	r28, r29
     70e:	09 f0       	breq	.+2      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     710:	98 c0       	rjmp	.+304    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     712:	03 70       	andi	r16, 0x03	; 3
     714:	11 27       	eor	r17, r17
     716:	ff 24       	eor	r15, r15
     718:	f3 94       	inc	r15
     71a:	01 2b       	or	r16, r17
     71c:	09 f4       	brne	.+2      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     71e:	91 c0       	rjmp	.+290    	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     720:	8a 01       	movw	r16, r20
     722:	0c 2c       	mov	r0, r12
     724:	02 c0       	rjmp	.+4      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     726:	16 95       	lsr	r17
     728:	07 95       	ror	r16
     72a:	0a 94       	dec	r0
     72c:	e2 f7       	brpl	.-8      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     72e:	ec 01       	movw	r28, r24
     730:	c0 27       	eor	r28, r16
     732:	d1 27       	eor	r29, r17
     734:	c3 70       	andi	r28, 0x03	; 3
     736:	dd 27       	eor	r29, r29
     738:	cd 2b       	or	r28, r29
     73a:	09 f0       	breq	.+2      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     73c:	9c c0       	rjmp	.+312    	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     73e:	83 70       	andi	r24, 0x03	; 3
     740:	99 27       	eor	r25, r25
     742:	89 2b       	or	r24, r25
     744:	09 f0       	breq	.+2      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     746:	f3 94       	inc	r15
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     748:	cf 01       	movw	r24, r30
     74a:	06 2c       	mov	r0, r6
     74c:	02 c0       	rjmp	.+4      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
     74e:	96 95       	lsr	r25
     750:	87 95       	ror	r24
     752:	0a 94       	dec	r0
     754:	e2 f7       	brpl	.-8      	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
     756:	80 27       	eor	r24, r16
     758:	91 27       	eor	r25, r17
     75a:	83 70       	andi	r24, 0x03	; 3
     75c:	99 27       	eor	r25, r25
     75e:	89 2b       	or	r24, r25
     760:	49 f4       	brne	.+18     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     762:	c8 01       	movw	r24, r16
     764:	83 70       	andi	r24, 0x03	; 3
     766:	99 27       	eor	r25, r25
     768:	89 2b       	or	r24, r25
     76a:	21 f0       	breq	.+8      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	f8 16       	cp	r15, r24
     770:	09 f4       	brne	.+2      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     772:	af c0       	rjmp	.+350    	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     774:	84 01       	movw	r16, r8
     776:	02 c0       	rjmp	.+4      	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
     778:	16 95       	lsr	r17
     77a:	07 95       	ror	r16
     77c:	5a 94       	dec	r5
     77e:	e2 f7       	brpl	.-8      	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
     780:	cd 01       	movw	r24, r26
     782:	06 2e       	mov	r0, r22
     784:	02 c0       	rjmp	.+4      	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     786:	96 95       	lsr	r25
     788:	87 95       	ror	r24
     78a:	0a 94       	dec	r0
     78c:	e2 f7       	brpl	.-8      	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     78e:	ec 01       	movw	r28, r24
     790:	c0 27       	eor	r28, r16
     792:	d1 27       	eor	r29, r17
     794:	c3 70       	andi	r28, 0x03	; 3
     796:	dd 27       	eor	r29, r29
     798:	cd 2b       	or	r28, r29
     79a:	09 f0       	breq	.+2      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
     79c:	54 c0       	rjmp	.+168    	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     79e:	e8 01       	movw	r28, r16
     7a0:	c3 70       	andi	r28, 0x03	; 3
     7a2:	dd 27       	eor	r29, r29
     7a4:	ff 24       	eor	r15, r15
     7a6:	f3 94       	inc	r15
     7a8:	cd 2b       	or	r28, r29
     7aa:	09 f4       	brne	.+2      	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
     7ac:	4c c0       	rjmp	.+152    	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     7ae:	89 01       	movw	r16, r18
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     7b2:	16 95       	lsr	r17
     7b4:	07 95       	ror	r16
     7b6:	ca 94       	dec	r12
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     7ba:	e8 01       	movw	r28, r16
     7bc:	c8 27       	eor	r28, r24
     7be:	d9 27       	eor	r29, r25
     7c0:	c3 70       	andi	r28, 0x03	; 3
     7c2:	dd 27       	eor	r29, r29
     7c4:	cd 2b       	or	r28, r29
     7c6:	09 f0       	breq	.+2      	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
     7c8:	5a c0       	rjmp	.+180    	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     7ca:	83 70       	andi	r24, 0x03	; 3
     7cc:	99 27       	eor	r25, r25
     7ce:	89 2b       	or	r24, r25
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
     7d2:	f3 94       	inc	r15
	for(int c=6;c>2;c--){
		for(int r=3;r<6;r++){
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
     7d4:	ca 01       	movw	r24, r20
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
     7d8:	96 95       	lsr	r25
     7da:	87 95       	ror	r24
     7dc:	6a 94       	dec	r6
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     7e0:	80 27       	eor	r24, r16
     7e2:	91 27       	eor	r25, r17
     7e4:	83 70       	andi	r24, 0x03	; 3
     7e6:	99 27       	eor	r25, r25
     7e8:	89 2b       	or	r24, r25
     7ea:	49 f4       	brne	.+18     	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
     7ec:	c8 01       	movw	r24, r16
     7ee:	83 70       	andi	r24, 0x03	; 3
     7f0:	99 27       	eor	r25, r25
     7f2:	89 2b       	or	r24, r25
     7f4:	21 f0       	breq	.+8      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
						similarCounter++;							// Increment counter
						if(similarCounter >= 3){					// If counter is increment to 3 ( repreating player 4 times), return
     7f6:	d2 e0       	ldi	r29, 0x02	; 2
     7f8:	fd 16       	cp	r15, r29
     7fa:	09 f4       	brne	.+2      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     7fc:	72 c0       	rjmp	.+228    	; 0x8e2 <__LOCK_REGION_LENGTH__+0x4e2>
     7fe:	cb 01       	movw	r24, r22
		}
	}

	// Check diagonal (negative slope)
	// Check 4 diagonal in a row from the last 3 row and the first 4 column ( the only combination)
	for(int c=6;c>2;c--){
     800:	64 30       	cpi	r22, 0x04	; 4
     802:	71 05       	cpc	r23, r1
     804:	09 f0       	breq	.+2      	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
     806:	1b cf       	rjmp	.-458    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
				break;
			}
		}
	}
	return winner_player;
     808:	83 2d       	mov	r24, r3
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	bf 90       	pop	r11
     81c:	af 90       	pop	r10
     81e:	9f 90       	pop	r9
     820:	8f 90       	pop	r8
     822:	7f 90       	pop	r7
     824:	6f 90       	pop	r6
     826:	5f 90       	pop	r5
     828:	4f 90       	pop	r4
     82a:	3f 90       	pop	r3
     82c:	08 95       	ret
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     82e:	e1 2c       	mov	r14, r1
     830:	2d cd       	rjmp	.-1446   	; 0x28c <checkForWinner+0x92>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	ac cd       	rjmp	.-1192   	; 0x38e <checkForWinner+0x194>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     836:	41 2c       	mov	r4, r1
     838:	3d ce       	rjmp	.-902    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     83a:	f1 2c       	mov	r15, r1
     83c:	8a ce       	rjmp	.-748    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     83e:	41 2c       	mov	r4, r1
     840:	20 cf       	rjmp	.-448    	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     842:	f1 2c       	mov	r15, r1
     844:	6d cf       	rjmp	.-294    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     846:	f1 2c       	mov	r15, r1
     848:	b2 cf       	rjmp	.-156    	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     84a:	f1 2c       	mov	r15, r1
     84c:	c9 ce       	rjmp	.-622    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     84e:	e1 2c       	mov	r14, r1
     850:	31 cd       	rjmp	.-1438   	; 0x2b4 <checkForWinner+0xba>
     852:	e1 2c       	mov	r14, r1
     854:	48 cd       	rjmp	.-1392   	; 0x2e6 <checkForWinner+0xec>
     856:	e1 2c       	mov	r14, r1
     858:	5f cd       	rjmp	.-1346   	; 0x318 <checkForWinner+0x11e>
						break;
					}
				}
			}
			else{			// If the player isn't the same as the next row, reset the counter and player variable
				similarCounter = 0;
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	ad cd       	rjmp	.-1190   	; 0x3b8 <checkForWinner+0x1be>
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	c6 cd       	rjmp	.-1140   	; 0x3ee <checkForWinner+0x1f4>
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	d7 cd       	rjmp	.-1106   	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	eb cd       	rjmp	.-1066   	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     86a:	41 2c       	mov	r4, r1
     86c:	3b ce       	rjmp	.-906    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     86e:	41 2c       	mov	r4, r1
     870:	20 cf       	rjmp	.-448    	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     872:	f1 2c       	mov	r15, r1
     874:	82 ce       	rjmp	.-764    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     876:	f1 2c       	mov	r15, r1
     878:	67 cf       	rjmp	.-306    	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     87a:	f1 2c       	mov	r15, r1
     87c:	c4 ce       	rjmp	.-632    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
							break;
						}
					}
				}
				else{			// If the player isn't the same as the next row, reset the counter and player variable
					similarCounter = 0;
     87e:	f1 2c       	mov	r15, r1
     880:	a9 cf       	rjmp	.-174    	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
		uint8_t similarCounter = 0;		// Stores the number of same player in a row
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int r=0;r<(6-1);r++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r+1]>>(c*2)) & 0b11) ){		// If the player from the current and next row is the same, increment a counter
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
     882:	c0 2f       	mov	r28, r16
     884:	c3 70       	andi	r28, 0x03	; 3
     886:	3c 2e       	mov	r3, r28
     888:	62 cd       	rjmp	.-1340   	; 0x34e <checkForWinner+0x154>
     88a:	8c 2f       	mov	r24, r28
     88c:	83 70       	andi	r24, 0x03	; 3
     88e:	38 2e       	mov	r3, r24
     890:	5e cd       	rjmp	.-1348   	; 0x34e <checkForWinner+0x154>
     892:	d0 2f       	mov	r29, r16
     894:	d3 70       	andi	r29, 0x03	; 3
     896:	3d 2e       	mov	r3, r29
     898:	5a cd       	rjmp	.-1356   	; 0x34e <checkForWinner+0x154>
		uint8_t similarCounter = 0;		// Stores the number of same player in a column
		uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
		for(int c=0;c<(7-1);c++){
			if( ((players[r]>>(c*2)) & 0b11) == ((players[r]>>((c+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
				if(((players[r]>>(c*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
					simlarPlayer = (players[r]>>(c*2))&0b11;	// Record the similar player
     89a:	de 2d       	mov	r29, r14
     89c:	d3 70       	andi	r29, 0x03	; 3
     89e:	3d 2e       	mov	r3, r29
     8a0:	e5 cd       	rjmp	.-1078   	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     8a2:	d0 2f       	mov	r29, r16
     8a4:	d3 70       	andi	r29, 0x03	; 3
     8a6:	3d 2e       	mov	r3, r29
     8a8:	e1 cd       	rjmp	.-1086   	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     8aa:	1e 2d       	mov	r17, r14
     8ac:	13 70       	andi	r17, 0x03	; 3
     8ae:	31 2e       	mov	r3, r17
     8b0:	dd cd       	rjmp	.-1094   	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     8b2:	60 2f       	mov	r22, r16
     8b4:	63 70       	andi	r22, 0x03	; 3
     8b6:	36 2e       	mov	r3, r22
     8b8:	d9 cd       	rjmp	.-1102   	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
     8ba:	ce 2d       	mov	r28, r14
     8bc:	c3 70       	andi	r28, 0x03	; 3
     8be:	3c 2e       	mov	r3, r28
     8c0:	9e cf       	rjmp	.-196    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
     8c2:	8e 2d       	mov	r24, r14
     8c4:	83 70       	andi	r24, 0x03	; 3
     8c6:	38 2e       	mov	r3, r24
     8c8:	b3 ce       	rjmp	.-666    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     8ca:	c0 2f       	mov	r28, r16
     8cc:	c3 70       	andi	r28, 0x03	; 3
     8ce:	3c 2e       	mov	r3, r28
     8d0:	af ce       	rjmp	.-674    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
     8d2:	c0 2f       	mov	r28, r16
     8d4:	c3 70       	andi	r28, 0x03	; 3
     8d6:	3c 2e       	mov	r3, r28
     8d8:	92 cf       	rjmp	.-220    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c+i)*2)) & 0b11) == ((players[r-i-1]>>((c+i+1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c+i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c+i)*2)) & 0b11;	// Record the similar player
     8da:	80 2f       	mov	r24, r16
     8dc:	83 70       	andi	r24, 0x03	; 3
     8de:	38 2e       	mov	r3, r24
     8e0:	a7 ce       	rjmp	.-690    	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
			uint8_t similarCounter = 0;		// Stores the number of same player in a column
			uint8_t simlarPlayer = 0;		// Stores the player for the previous variable
			for(int i=0;i<(4-1);i++){
				if( ((players[r-i]>>((c-i)*2)) & 0b11) == ((players[r-i-1]>>((c-i-1)*2)) & 0b11) ){		// If the player from the current and next column is the same, increment a counter
					if(((players[r-i]>>((c-i)*2)) & 0b11) != 0){   		// Only increment counter if the player isn't 0 (none)
						simlarPlayer = (players[r-i]>>((c-i)*2)) & 0b11;	// Record the similar player
     8e2:	80 2f       	mov	r24, r16
     8e4:	83 70       	andi	r24, 0x03	; 3
     8e6:	38 2e       	mov	r3, r24
     8e8:	8a cf       	rjmp	.-236    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>

000008ea <main>:
int waitForButtonInput(void);
void clearBuffer(uint16_t *c, int array_lenght);
uint8_t checkForWinner(void);

int main(void)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <main+0x6>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <main+0x8>
     8f2:	1f 92       	push	r1
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
	// Set the LED sink pins to a low output and high impedance
	DDRC = 0;
     8f8:	17 b8       	out	0x07, r1	; 7
	PORTC = 0;
     8fa:	18 b8       	out	0x08, r1	; 8
	// Set the buttons to input pull-up
	DDRD = 0x00;
     8fc:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	8b b9       	out	0x0b, r24	; 11
	// Set up PORTB pins
	DDRB |= 0b00101110; // Set all pins to output except for crystal, MISO, and PB0
     902:	84 b1       	in	r24, 0x04	; 4
     904:	8e 62       	ori	r24, 0x2E	; 46
     906:	84 b9       	out	0x04, r24	; 4
	reset_shift_registers();
     908:	0e 94 53 00 	call	0xa6	; 0xa6 <reset_shift_registers>
	PORTB |= 1<<4; // Due to SRCLR pin being controlled by SPI, it now has a pull-up to avoid it going LOW
     90c:	2c 9a       	sbi	0x05, 4	; 5
	DISABLE_595_OUTPUT;
     90e:	2a 9a       	sbi	0x05, 2	; 5
	// Set up SPI module
	SPCR = 0b00010000; // Master mode - Highest clock
     910:	80 e1       	ldi	r24, 0x10	; 16
     912:	8c bd       	out	0x2c, r24	; 44
	SPSR |= 1<<0; // Enable clock 2x multiplication
     914:	8d b5       	in	r24, 0x2d	; 45
     916:	81 60       	ori	r24, 0x01	; 1
     918:	8d bd       	out	0x2d, r24	; 45
	// Set up update timer
	TCCR0B = 2; // Set divider to CLK/8
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x01; // Set time interrupt
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     924:	e2 e4       	ldi	r30, 0x42	; 66
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	88 e1       	ldi	r24, 0x18	; 24
     92a:	df 01       	movw	r26, r30
     92c:	1d 92       	st	X+, r1
     92e:	8a 95       	dec	r24
     930:	e9 f7       	brne	.-6      	; 0x92c <__stack+0x2d>
	
	// Clear LEDs variable
	for(int i=0;i<6;i++){led[i] = 0;}
	
	SPI_ENABLE;	
     932:	8c b5       	in	r24, 0x2c	; 44
     934:	80 64       	ori	r24, 0x40	; 64
     936:	8c bd       	out	0x2c, r24	; 44
	sei();
     938:	78 94       	sei
	ENABLE_595_OUTPUT;
     93a:	2a 98       	cbi	0x05, 2	; 5

// TODO: Turn this into a macro
// Function to clear the buffer of an array
void clearBuffer(uint16_t *c, int array_lenght){
	for(int i=0;i<array_lenght;i++){
		c[i] = 0;
     93c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <players+0x1>
     940:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <players>
     944:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <players+0x3>
     948:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <players+0x2>
     94c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <players+0x5>
     950:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <players+0x4>
     954:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <players+0x7>
     958:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <players+0x6>
     95c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <players+0x9>
     960:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <players+0x8>
     964:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <players+0xb>
     968:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <players+0xa>
// 	PORTB |= (1<<1);
// 	DDRC |= 1<<0; // Set fist row enable
// 	ENABLE_595_OUTPUT; 

	clearBuffer(players, 6);
	active_player = 1;			// Set the active player to player 1
     96c:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__data_end>
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
     970:	89 b1       	in	r24, 0x09	; 9
     972:	8f 3f       	cpi	r24, 0xFF	; 255
     974:	e9 f3       	breq	.-6      	; 0x970 <__stack+0x71>
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     976:	48 9b       	sbis	0x09, 0	; 9
     978:	7e c1       	rjmp	.+764    	; 0xc76 <__stack+0x377>
     97a:	49 9b       	sbis	0x09, 1	; 9
     97c:	00 c2       	rjmp	.+1024   	; 0xd7e <__stack+0x47f>
     97e:	4a 9b       	sbis	0x09, 2	; 9
     980:	01 c2       	rjmp	.+1026   	; 0xd84 <__stack+0x485>
     982:	4b 9b       	sbis	0x09, 3	; 9
     984:	02 c2       	rjmp	.+1028   	; 0xd8a <__stack+0x48b>
     986:	4c 9b       	sbis	0x09, 4	; 9
     988:	c7 c2       	rjmp	.+1422   	; 0xf18 <__stack+0x619>
     98a:	4d 9b       	sbis	0x09, 5	; 9
     98c:	c2 c2       	rjmp	.+1412   	; 0xf12 <__stack+0x613>
     98e:	89 b1       	in	r24, 0x09	; 9
     990:	b1 2c       	mov	r11, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     992:	bf e7       	ldi	r27, 0x7F	; 127
     994:	e9 ea       	ldi	r30, 0xA9	; 169
     996:	f3 e0       	ldi	r31, 0x03	; 3
     998:	b1 50       	subi	r27, 0x01	; 1
     99a:	e0 40       	sbci	r30, 0x00	; 0
     99c:	f0 40       	sbci	r31, 0x00	; 0
     99e:	e1 f7       	brne	.-8      	; 0x998 <__stack+0x99>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <__stack+0xa3>
     9a2:	00 00       	nop
    while (1) 
    {
		int c = waitForButtonInput();
		_delay_ms(75);		// Delay for button noise
		int foundRow = 0;		// Variable to store if the lowest row has been found thru the for loop
		if(((players[0] >> (c*2)) & 0b11) == 0){		// Only switch player and find the row if the column isn't fully occupied
     9a4:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <players>
     9a8:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <players+0x1>
     9ac:	c9 01       	movw	r24, r18
     9ae:	0b 2c       	mov	r0, r11
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
     9b2:	96 95       	lsr	r25
     9b4:	87 95       	ror	r24
     9b6:	0a 94       	dec	r0
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <__stack+0xb3>
     9ba:	83 70       	andi	r24, 0x03	; 3
     9bc:	99 27       	eor	r25, r25
     9be:	89 2b       	or	r24, r25
     9c0:	b9 f6       	brne	.-82     	; 0x970 <__stack+0x71>
			for(int r=1;r<6;r++){		// Cycle thru all but one row
				players[r-1] |= active_player << (c*2);		// Set the row LED on of the last row on the loop
     9c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0b 2c       	mov	r0, r11
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0xd1>
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	0a 94       	dec	r0
     9d2:	e2 f7       	brpl	.-8      	; 0x9cc <__stack+0xcd>
     9d4:	28 2b       	or	r18, r24
     9d6:	39 2b       	or	r19, r25
     9d8:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <players+0x1>
     9dc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <players>
				if(r != 1){players[r-2] &= ~(0b11 << (c*2));}		// If the loop isn't the first one, set the last last row off
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0b 2c       	mov	r0, r11
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__stack+0xed>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	0a 94       	dec	r0
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <__stack+0xe9>
     9f0:	2c 01       	movw	r4, r24
     9f2:	40 94       	com	r4
     9f4:	50 94       	com	r5
     9f6:	a6 e3       	ldi	r26, 0x36	; 54
     9f8:	b1 e0       	ldi	r27, 0x01	; 1
     9fa:	ba 83       	std	Y+2, r27	; 0x02
     9fc:	a9 83       	std	Y+1, r26	; 0x01
     9fe:	bc 83       	std	Y+4, r27	; 0x04
     a00:	ab 83       	std	Y+3, r26	; 0x03
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	4b 01       	movw	r8, r22
	}
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
     a08:	f8 94       	cli
     a0a:	02 e4       	ldi	r16, 0x42	; 66
     a0c:	20 2e       	mov	r2, r16
     a0e:	01 e0       	ldi	r16, 0x01	; 1
     a10:	30 2e       	mov	r3, r16
     a12:	f1 01       	movw	r30, r2
     a14:	26 e3       	ldi	r18, 0x36	; 54
     a16:	31 e0       	ldi	r19, 0x01	; 1
     a18:	6b 80       	ldd	r6, Y+3	; 0x03
     a1a:	7c 80       	ldd	r7, Y+4	; 0x04
     a1c:	85 c0       	rjmp	.+266    	; 0xb28 <__stack+0x229>
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	09 f4       	brne	.+2      	; 0xa24 <__stack+0x125>
     a22:	ce c0       	rjmp	.+412    	; 0xbc0 <__stack+0x2c1>
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	a0 e0       	ldi	r26, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	18 e0       	ldi	r17, 0x08	; 8
     a2e:	c1 2e       	mov	r12, r17
     a30:	d1 2c       	mov	r13, r1
     a32:	e1 2c       	mov	r14, r1
     a34:	f1 2c       	mov	r15, r1
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	8b 83       	std	Y+3, r24	; 0x03
     a3a:	a1 2c       	mov	r10, r1
     a3c:	00 e0       	ldi	r16, 0x00	; 0
     a3e:	10 e0       	ldi	r17, 0x00	; 0
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     a40:	ca 01       	movw	r24, r20
     a42:	96 95       	lsr	r25
     a44:	87 95       	ror	r24
     a46:	96 95       	lsr	r25
     a48:	87 95       	ror	r24
     a4a:	83 70       	andi	r24, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	39 f0       	breq	.+14     	; 0xa5e <__stack+0x15f>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	09 f4       	brne	.+2      	; 0xa56 <__stack+0x157>
     a54:	c9 c0       	rjmp	.+402    	; 0xbe8 <__stack+0x2e9>
     a56:	cb 2e       	mov	r12, r27
     a58:	da 2e       	mov	r13, r26
     a5a:	e7 2e       	mov	r14, r23
     a5c:	f6 2e       	mov	r15, r22
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     a5e:	ca 01       	movw	r24, r20
     a60:	92 95       	swap	r25
     a62:	82 95       	swap	r24
     a64:	8f 70       	andi	r24, 0x0F	; 15
     a66:	89 27       	eor	r24, r25
     a68:	9f 70       	andi	r25, 0x0F	; 15
     a6a:	89 27       	eor	r24, r25
     a6c:	83 70       	andi	r24, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	09 f4       	brne	.+2      	; 0xa74 <__stack+0x175>
     a72:	89 c0       	rjmp	.+274    	; 0xb86 <__stack+0x287>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	09 f4       	brne	.+2      	; 0xa7a <__stack+0x17b>
     a78:	91 c0       	rjmp	.+290    	; 0xb9c <__stack+0x29d>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	dc 01       	movw	r26, r24
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     a80:	8c 29       	or	r24, r12
     a82:	9d 29       	or	r25, r13
     a84:	ae 29       	or	r26, r14
     a86:	bf 29       	or	r27, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     a88:	ba 01       	movw	r22, r20
     a8a:	00 24       	eor	r0, r0
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	00 1c       	adc	r0, r0
     a92:	66 0f       	add	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	00 1c       	adc	r0, r0
     a98:	67 2f       	mov	r22, r23
     a9a:	70 2d       	mov	r23, r0
     a9c:	63 70       	andi	r22, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     a9e:	61 30       	cpi	r22, 0x01	; 1
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <__stack+0x1a5>
     aa2:	6b c0       	rjmp	.+214    	; 0xb7a <__stack+0x27b>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     aa4:	62 30       	cpi	r22, 0x02	; 2
     aa6:	09 f4       	brne	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	73 c0       	rjmp	.+230    	; 0xb90 <__stack+0x291>
     aaa:	c1 2c       	mov	r12, r1
     aac:	d1 2c       	mov	r13, r1
     aae:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     ab0:	8c 29       	or	r24, r12
     ab2:	9d 29       	or	r25, r13
     ab4:	ae 29       	or	r26, r14
     ab6:	bf 29       	or	r27, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     ab8:	65 2f       	mov	r22, r21
     aba:	63 70       	andi	r22, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     abc:	61 30       	cpi	r22, 0x01	; 1
     abe:	09 f4       	brne	.+2      	; 0xac2 <__stack+0x1c3>
     ac0:	56 c0       	rjmp	.+172    	; 0xb6e <__stack+0x26f>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     ac2:	62 30       	cpi	r22, 0x02	; 2
     ac4:	09 f4       	brne	.+2      	; 0xac8 <__stack+0x1c9>
     ac6:	76 c0       	rjmp	.+236    	; 0xbb4 <__stack+0x2b5>
     ac8:	c1 2c       	mov	r12, r1
     aca:	d1 2c       	mov	r13, r1
     acc:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     ace:	8c 29       	or	r24, r12
     ad0:	9d 29       	or	r25, r13
     ad2:	ae 29       	or	r26, r14
     ad4:	bf 29       	or	r27, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     ad6:	65 2f       	mov	r22, r21
     ad8:	66 95       	lsr	r22
     ada:	66 95       	lsr	r22
     adc:	63 70       	andi	r22, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     ade:	61 30       	cpi	r22, 0x01	; 1
     ae0:	09 f4       	brne	.+2      	; 0xae4 <__stack+0x1e5>
     ae2:	3f c0       	rjmp	.+126    	; 0xb62 <__stack+0x263>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     ae4:	62 30       	cpi	r22, 0x02	; 2
     ae6:	09 f4       	brne	.+2      	; 0xaea <__stack+0x1eb>
     ae8:	5e c0       	rjmp	.+188    	; 0xba6 <__stack+0x2a7>
     aea:	c1 2c       	mov	r12, r1
     aec:	d1 2c       	mov	r13, r1
     aee:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     af0:	8c 29       	or	r24, r12
     af2:	9d 29       	or	r25, r13
     af4:	ae 29       	or	r26, r14
     af6:	bf 29       	or	r27, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     af8:	45 2f       	mov	r20, r21
     afa:	42 95       	swap	r20
     afc:	43 70       	andi	r20, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     afe:	41 30       	cpi	r20, 0x01	; 1
     b00:	59 f1       	breq	.+86     	; 0xb58 <__stack+0x259>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     b02:	42 30       	cpi	r20, 0x02	; 2
     b04:	09 f4       	brne	.+2      	; 0xb08 <__stack+0x209>
     b06:	6b c0       	rjmp	.+214    	; 0xbde <__stack+0x2df>
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	ba 01       	movw	r22, r20
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     b0e:	84 2b       	or	r24, r20
     b10:	95 2b       	or	r25, r21
     b12:	a6 2b       	or	r26, r22
     b14:	b7 2b       	or	r27, r23
     b16:	81 93       	st	Z+, r24
     b18:	91 93       	st	Z+, r25
     b1a:	a1 93       	st	Z+, r26
     b1c:	b1 93       	st	Z+, r27
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	ea 35       	cpi	r30, 0x5A	; 90
     b22:	f9 07       	cpc	r31, r25
     b24:	09 f4       	brne	.+2      	; 0xb28 <__stack+0x229>
     b26:	64 c0       	rjmp	.+200    	; 0xbf0 <__stack+0x2f1>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     b28:	d9 01       	movw	r26, r18
     b2a:	4d 91       	ld	r20, X+
     b2c:	5d 91       	ld	r21, X+
     b2e:	9d 01       	movw	r18, r26
     b30:	84 2f       	mov	r24, r20
     b32:	83 70       	andi	r24, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	09 f0       	breq	.+2      	; 0xb3a <__stack+0x23b>
     b38:	72 cf       	rjmp	.-284    	; 0xa1e <__stack+0x11f>
     b3a:	b1 e0       	ldi	r27, 0x01	; 1
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	99 e0       	ldi	r25, 0x09	; 9
     b44:	c9 2e       	mov	r12, r25
     b46:	d1 2c       	mov	r13, r1
     b48:	e1 2c       	mov	r14, r1
     b4a:	f1 2c       	mov	r15, r1
     b4c:	99 e1       	ldi	r25, 0x19	; 25
     b4e:	9b 83       	std	Y+3, r25	; 0x03
     b50:	a1 2c       	mov	r10, r1
     b52:	00 e0       	ldi	r16, 0x00	; 0
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	74 cf       	rjmp	.-280    	; 0xa40 <__stack+0x141>
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	60 e1       	ldi	r22, 0x10	; 16
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	d6 cf       	rjmp	.-84     	; 0xb0e <__stack+0x20f>
     b62:	c1 2c       	mov	r12, r1
     b64:	00 e8       	ldi	r16, 0x80	; 128
     b66:	d0 2e       	mov	r13, r16
     b68:	e1 2c       	mov	r14, r1
     b6a:	f1 2c       	mov	r15, r1
     b6c:	c1 cf       	rjmp	.-126    	; 0xaf0 <__stack+0x1f1>
     b6e:	c1 2c       	mov	r12, r1
     b70:	60 e1       	ldi	r22, 0x10	; 16
     b72:	d6 2e       	mov	r13, r22
     b74:	e1 2c       	mov	r14, r1
     b76:	f1 2c       	mov	r15, r1
     b78:	aa cf       	rjmp	.-172    	; 0xace <__stack+0x1cf>
     b7a:	c1 2c       	mov	r12, r1
     b7c:	12 e0       	ldi	r17, 0x02	; 2
     b7e:	d1 2e       	mov	r13, r17
     b80:	e1 2c       	mov	r14, r1
     b82:	f1 2c       	mov	r15, r1
     b84:	95 cf       	rjmp	.-214    	; 0xab0 <__stack+0x1b1>
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	78 cf       	rjmp	.-272    	; 0xa80 <__stack+0x181>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     b90:	c1 2c       	mov	r12, r1
     b92:	76 e0       	ldi	r23, 0x06	; 6
     b94:	d7 2e       	mov	r13, r23
     b96:	e1 2c       	mov	r14, r1
     b98:	f1 2c       	mov	r15, r1
     b9a:	8a cf       	rjmp	.-236    	; 0xab0 <__stack+0x1b1>
     b9c:	80 ec       	ldi	r24, 0xC0	; 192
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a0 e0       	ldi	r26, 0x00	; 0
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	6d cf       	rjmp	.-294    	; 0xa80 <__stack+0x181>
     ba6:	c1 2c       	mov	r12, r1
     ba8:	10 e8       	ldi	r17, 0x80	; 128
     baa:	d1 2e       	mov	r13, r17
     bac:	ee 24       	eor	r14, r14
     bae:	e3 94       	inc	r14
     bb0:	f1 2c       	mov	r15, r1
     bb2:	9e cf       	rjmp	.-196    	; 0xaf0 <__stack+0x1f1>
     bb4:	c1 2c       	mov	r12, r1
     bb6:	40 e3       	ldi	r20, 0x30	; 48
     bb8:	d4 2e       	mov	r13, r20
     bba:	e1 2c       	mov	r14, r1
     bbc:	f1 2c       	mov	r15, r1
     bbe:	87 cf       	rjmp	.-242    	; 0xace <__stack+0x1cf>
     bc0:	b3 e0       	ldi	r27, 0x03	; 3
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	8b e0       	ldi	r24, 0x0B	; 11
     bca:	c8 2e       	mov	r12, r24
     bcc:	d1 2c       	mov	r13, r1
     bce:	e1 2c       	mov	r14, r1
     bd0:	f1 2c       	mov	r15, r1
     bd2:	8b e1       	ldi	r24, 0x1B	; 27
     bd4:	8b 83       	std	Y+3, r24	; 0x03
     bd6:	a1 2c       	mov	r10, r1
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	31 cf       	rjmp	.-414    	; 0xa40 <__stack+0x141>
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	68 e1       	ldi	r22, 0x18	; 24
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	93 cf       	rjmp	.-218    	; 0xb0e <__stack+0x20f>
     be8:	cb 80       	ldd	r12, Y+3	; 0x03
     bea:	da 2c       	mov	r13, r10
     bec:	78 01       	movw	r14, r16
     bee:	37 cf       	rjmp	.-402    	; 0xa5e <__stack+0x15f>
     bf0:	7c 82       	std	Y+4, r7	; 0x04
     bf2:	6b 82       	std	Y+3, r6	; 0x03
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
		}
	}
	sei();
     bf4:	78 94       	sei
		if(((players[0] >> (c*2)) & 0b11) == 0){		// Only switch player and find the row if the column isn't fully occupied
			for(int r=1;r<6;r++){		// Cycle thru all but one row
				players[r-1] |= active_player << (c*2);		// Set the row LED on of the last row on the loop
				if(r != 1){players[r-2] &= ~(0b11 << (c*2));}		// If the loop isn't the first one, set the last last row off
				playerToLed();		// Update the LED array to showcase the animation
				if(((players[r] >> (c*2)) & 0b11) != 0){		// If the row is occupied, exit the loop ( the led should be set from the last 2 lines)
     bf6:	ab 81       	ldd	r26, Y+3	; 0x03
     bf8:	bc 81       	ldd	r27, Y+4	; 0x04
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	8d 91       	ld	r24, X+
     bfe:	9c 91       	ld	r25, X
     c00:	13 97       	sbiw	r26, 0x03	; 3
     c02:	0b 2c       	mov	r0, r11
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <__stack+0x30b>
     c06:	96 95       	lsr	r25
     c08:	87 95       	ror	r24
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <__stack+0x307>
     c0e:	83 70       	andi	r24, 0x03	; 3
     c10:	99 27       	eor	r25, r25
     c12:	89 2b       	or	r24, r25
     c14:	a1 f5       	brne	.+104    	; 0xc7e <__stack+0x37f>
     c16:	bf e7       	ldi	r27, 0x7F	; 127
     c18:	e9 ea       	ldi	r30, 0xA9	; 169
     c1a:	f3 e0       	ldi	r31, 0x03	; 3
     c1c:	b1 50       	subi	r27, 0x01	; 1
     c1e:	e0 40       	sbci	r30, 0x00	; 0
     c20:	f0 40       	sbci	r31, 0x00	; 0
     c22:	e1 f7       	brne	.-8      	; 0xc1c <__stack+0x31d>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <__stack+0x327>
     c26:	00 00       	nop
    {
		int c = waitForButtonInput();
		_delay_ms(75);		// Delay for button noise
		int foundRow = 0;		// Variable to store if the lowest row has been found thru the for loop
		if(((players[0] >> (c*2)) & 0b11) == 0){		// Only switch player and find the row if the column isn't fully occupied
			for(int r=1;r<6;r++){		// Cycle thru all but one row
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	82 1a       	sub	r8, r18
     c2c:	92 0a       	sbc	r9, r18
     c2e:	36 e0       	ldi	r19, 0x06	; 6
     c30:	83 16       	cp	r8, r19
     c32:	91 04       	cpc	r9, r1
     c34:	09 f4       	brne	.+2      	; 0xc38 <__stack+0x339>
     c36:	ac c0       	rjmp	.+344    	; 0xd90 <__stack+0x491>
				players[r-1] |= active_player << (c*2);		// Set the row LED on of the last row on the loop
     c38:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0b 2c       	mov	r0, r11
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <__stack+0x347>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <__stack+0x343>
     c4a:	ab 81       	ldd	r26, Y+3	; 0x03
     c4c:	bc 81       	ldd	r27, Y+4	; 0x04
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	2d 91       	ld	r18, X+
     c52:	3c 91       	ld	r19, X
     c54:	13 97       	sbiw	r26, 0x03	; 3
     c56:	82 2b       	or	r24, r18
     c58:	93 2b       	or	r25, r19
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	9c 93       	st	X, r25
     c5e:	8e 93       	st	-X, r24
     c60:	12 97       	sbiw	r26, 0x02	; 2
				if(r != 1){players[r-2] &= ~(0b11 << (c*2));}		// If the loop isn't the first one, set the last last row off
     c62:	8d 91       	ld	r24, X+
     c64:	9c 91       	ld	r25, X
     c66:	11 97       	sbiw	r26, 0x01	; 1
     c68:	84 21       	and	r24, r4
     c6a:	95 21       	and	r25, r5
     c6c:	8d 93       	st	X+, r24
     c6e:	9d 93       	st	X+, r25
     c70:	bc 83       	std	Y+4, r27	; 0x04
     c72:	ab 83       	std	Y+3, r26	; 0x03
     c74:	c9 ce       	rjmp	.-622    	; 0xa08 <__stack+0x109>
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     c76:	5c e0       	ldi	r21, 0x0C	; 12
     c78:	b5 2e       	mov	r11, r21
     c7a:	8b ce       	rjmp	.-746    	; 0x992 <__stack+0x93>
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
		}
	}
	sei();
     c7c:	78 94       	sei
			if(foundRow == 0){		// If didn't find the non-ocupied row, must be the last one
				players[5] |= active_player << (c*2);
				players[5-1] &= ~(0b11 << (c*2));
				playerToLed();
			}
			SWITCH_ACTIVE_PLAYER;		// Switch the active player if the row isn't fully occupied
     c7e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	09 f4       	brne	.+2      	; 0xc88 <__stack+0x389>
     c86:	99 c1       	rjmp	.+818    	; 0xfba <__stack+0x6bb>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
			//number_of_turns++;			// Increase the number of turns
			int w = checkForWinner();	// Check for who, or none, player that one
     c8e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <checkForWinner>
     c92:	90 e0       	ldi	r25, 0x00	; 0
			
			//Reset loop, only is activated if there is a winner or it is to be reset by software
			if(w!= 0){
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	09 f4       	brne	.+2      	; 0xc9a <__stack+0x39b>
     c98:	6b ce       	rjmp	.-810    	; 0x970 <__stack+0x71>
     c9a:	bf ef       	ldi	r27, 0xFF	; 255
     c9c:	e4 e3       	ldi	r30, 0x34	; 52
     c9e:	fc e0       	ldi	r31, 0x0C	; 12
     ca0:	b1 50       	subi	r27, 0x01	; 1
     ca2:	e0 40       	sbci	r30, 0x00	; 0
     ca4:	f0 40       	sbci	r31, 0x00	; 0
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <__stack+0x3a1>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <__stack+0x3ab>
     caa:	00 00       	nop
				_delay_ms(250);
				for(int i=0;i<6;i++){led[i] = 0;}
     cac:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <led>
     cb0:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <led+0x1>
     cb4:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <led+0x2>
     cb8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <led+0x3>
     cbc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <led+0x4>
     cc0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <led+0x5>
     cc4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <led+0x6>
     cc8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <led+0x7>
     ccc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <led+0x8>
     cd0:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <led+0x9>
     cd4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <led+0xa>
     cd8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <led+0xb>
     cdc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <led+0xc>
     ce0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <led+0xd>
     ce4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <led+0xe>
     ce8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <led+0xf>
     cec:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <led+0x10>
     cf0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <led+0x11>
     cf4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <led+0x12>
     cf8:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <led+0x13>
     cfc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <led+0x14>
     d00:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <led+0x15>
     d04:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <led+0x16>
     d08:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <led+0x17>
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	91 05       	cpc	r25, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <__stack+0x415>
     d12:	55 c1       	rjmp	.+682    	; 0xfbe <__stack+0x6bf>
     d14:	02 97       	sbiw	r24, 0x02	; 2
     d16:	09 f4       	brne	.+2      	; 0xd1a <__stack+0x41b>
     d18:	81 c1       	rjmp	.+770    	; 0x101c <__stack+0x71d>
     d1a:	85 e0       	ldi	r24, 0x05	; 5
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	37 e8       	ldi	r19, 0x87	; 135
     d22:	43 e1       	ldi	r20, 0x13	; 19
     d24:	21 50       	subi	r18, 0x01	; 1
     d26:	30 40       	sbci	r19, 0x00	; 0
     d28:	40 40       	sbci	r20, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <__stack+0x425>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <__stack+0x42f>
     d2e:	00 00       	nop
				// Blink thru the indicator LED
				for(int i=0;i<5;i++){
					if(w == 1){led[0] = 0b001001001;}
					else if(w == 2){led[0] = 0b011011011;}
					_delay_ms(400);
					led[0] = 0;
     d30:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <led>
     d34:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <led+0x1>
     d38:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <led+0x2>
     d3c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <led+0x3>
     d40:	af ef       	ldi	r26, 0xFF	; 255
     d42:	b7 e8       	ldi	r27, 0x87	; 135
     d44:	e3 e1       	ldi	r30, 0x13	; 19
     d46:	a1 50       	subi	r26, 0x01	; 1
     d48:	b0 40       	sbci	r27, 0x00	; 0
     d4a:	e0 40       	sbci	r30, 0x00	; 0
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <__stack+0x447>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <__stack+0x451>
     d50:	00 00       	nop
     d52:	01 97       	sbiw	r24, 0x01	; 1
			//Reset loop, only is activated if there is a winner or it is to be reset by software
			if(w!= 0){
				_delay_ms(250);
				for(int i=0;i<6;i++){led[i] = 0;}
				// Blink thru the indicator LED
				for(int i=0;i<5;i++){
     d54:	21 f7       	brne	.-56     	; 0xd1e <__stack+0x41f>
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
     d56:	89 b1       	in	r24, 0x09	; 9
     d58:	8f 3f       	cpi	r24, 0xFF	; 255
     d5a:	e9 f3       	breq	.-6      	; 0xd56 <__stack+0x457>
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     d5c:	48 9b       	sbis	0x09, 0	; 9
     d5e:	fb cf       	rjmp	.-10     	; 0xd56 <__stack+0x457>
     d60:	49 9b       	sbis	0x09, 1	; 9
     d62:	f9 cf       	rjmp	.-14     	; 0xd56 <__stack+0x457>
     d64:	4a 9b       	sbis	0x09, 2	; 9
     d66:	f7 cf       	rjmp	.-18     	; 0xd56 <__stack+0x457>
     d68:	4b 9b       	sbis	0x09, 3	; 9
     d6a:	f5 cf       	rjmp	.-22     	; 0xd56 <__stack+0x457>
     d6c:	4c 9b       	sbis	0x09, 4	; 9
     d6e:	f3 cf       	rjmp	.-26     	; 0xd56 <__stack+0x457>
     d70:	4d 9b       	sbis	0x09, 5	; 9
     d72:	83 c1       	rjmp	.+774    	; 0x107a <__stack+0x77b>
     d74:	89 b1       	in	r24, 0x09	; 9
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
     d76:	89 b1       	in	r24, 0x09	; 9
     d78:	8f 3f       	cpi	r24, 0xFF	; 255
     d7a:	69 f3       	breq	.-38     	; 0xd56 <__stack+0x457>
     d7c:	ef cf       	rjmp	.-34     	; 0xd5c <__stack+0x45d>
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     d7e:	4a e0       	ldi	r20, 0x0A	; 10
     d80:	b4 2e       	mov	r11, r20
     d82:	07 ce       	rjmp	.-1010   	; 0x992 <__stack+0x93>
     d84:	38 e0       	ldi	r19, 0x08	; 8
     d86:	b3 2e       	mov	r11, r19
     d88:	04 ce       	rjmp	.-1016   	; 0x992 <__stack+0x93>
     d8a:	26 e0       	ldi	r18, 0x06	; 6
     d8c:	b2 2e       	mov	r11, r18
     d8e:	01 ce       	rjmp	.-1022   	; 0x992 <__stack+0x93>
     d90:	0a e5       	ldi	r16, 0x5A	; 90
     d92:	11 e0       	ldi	r17, 0x01	; 1
					break;		// Break out of the for loop
				}
				_delay_ms(75);		// Delay for animation
			}
			if(foundRow == 0){		// If didn't find the non-ocupied row, must be the last one
				players[5] |= active_player << (c*2);
     d94:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <__stack+0x4a1>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	ba 94       	dec	r11
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <__stack+0x49d>
     da4:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <players+0xa>
     da8:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <players+0xb>
     dac:	82 2b       	or	r24, r18
     dae:	93 2b       	or	r25, r19
     db0:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <players+0xb>
     db4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <players+0xa>
				players[5-1] &= ~(0b11 << (c*2));
     db8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <players+0x8>
     dbc:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <players+0x9>
     dc0:	84 21       	and	r24, r4
     dc2:	95 21       	and	r25, r5
     dc4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <players+0x9>
     dc8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <players+0x8>
	}
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
     dcc:	f8 94       	cli
     dce:	e2 e4       	ldi	r30, 0x42	; 66
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	86 e3       	ldi	r24, 0x36	; 54
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	81 c0       	rjmp	.+258    	; 0xede <__stack+0x5df>
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	09 f4       	brne	.+2      	; 0xde2 <__stack+0x4e3>
     de0:	d9 c0       	rjmp	.+434    	; 0xf94 <__stack+0x695>
     de2:	a1 2c       	mov	r10, r1
     de4:	b1 2c       	mov	r11, r1
     de6:	c1 2c       	mov	r12, r1
     de8:	d1 2c       	mov	r13, r1
     dea:	48 e0       	ldi	r20, 0x08	; 8
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	b8 e1       	ldi	r27, 0x18	; 24
     df4:	eb 2e       	mov	r14, r27
     df6:	f1 2c       	mov	r15, r1
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	a0 e0       	ldi	r26, 0x00	; 0
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     dfc:	9c 01       	movw	r18, r24
     dfe:	36 95       	lsr	r19
     e00:	27 95       	ror	r18
     e02:	36 95       	lsr	r19
     e04:	27 95       	ror	r18
     e06:	23 70       	andi	r18, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     e08:	21 30       	cpi	r18, 0x01	; 1
     e0a:	29 f0       	breq	.+10     	; 0xe16 <__stack+0x517>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	09 f4       	brne	.+2      	; 0xe12 <__stack+0x513>
     e10:	d0 c0       	rjmp	.+416    	; 0xfb2 <__stack+0x6b3>
     e12:	a5 01       	movw	r20, r10
     e14:	b6 01       	movw	r22, r12
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e16:	9c 01       	movw	r18, r24
     e18:	32 95       	swap	r19
     e1a:	22 95       	swap	r18
     e1c:	2f 70       	andi	r18, 0x0F	; 15
     e1e:	23 27       	eor	r18, r19
     e20:	3f 70       	andi	r19, 0x0F	; 15
     e22:	23 27       	eor	r18, r19
     e24:	23 70       	andi	r18, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     e26:	21 30       	cpi	r18, 0x01	; 1
     e28:	09 f4       	brne	.+2      	; 0xe2c <__stack+0x52d>
     e2a:	90 c0       	rjmp	.+288    	; 0xf4c <__stack+0x64d>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	09 f4       	brne	.+2      	; 0xe32 <__stack+0x533>
     e30:	99 c0       	rjmp	.+306    	; 0xf64 <__stack+0x665>
     e32:	c1 2c       	mov	r12, r1
     e34:	d1 2c       	mov	r13, r1
     e36:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     e38:	4c 29       	or	r20, r12
     e3a:	5d 29       	or	r21, r13
     e3c:	6e 29       	or	r22, r14
     e3e:	7f 29       	or	r23, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e40:	9c 01       	movw	r18, r24
     e42:	00 24       	eor	r0, r0
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	00 1c       	adc	r0, r0
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	00 1c       	adc	r0, r0
     e50:	23 2f       	mov	r18, r19
     e52:	30 2d       	mov	r19, r0
     e54:	23 70       	andi	r18, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     e56:	21 30       	cpi	r18, 0x01	; 1
     e58:	09 f4       	brne	.+2      	; 0xe5c <__stack+0x55d>
     e5a:	72 c0       	rjmp	.+228    	; 0xf40 <__stack+0x641>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	09 f4       	brne	.+2      	; 0xe62 <__stack+0x563>
     e60:	7b c0       	rjmp	.+246    	; 0xf58 <__stack+0x659>
     e62:	c1 2c       	mov	r12, r1
     e64:	d1 2c       	mov	r13, r1
     e66:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     e68:	4c 29       	or	r20, r12
     e6a:	5d 29       	or	r21, r13
     e6c:	6e 29       	or	r22, r14
     e6e:	7f 29       	or	r23, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e70:	29 2f       	mov	r18, r25
     e72:	23 70       	andi	r18, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     e74:	21 30       	cpi	r18, 0x01	; 1
     e76:	09 f4       	brne	.+2      	; 0xe7a <__stack+0x57b>
     e78:	5d c0       	rjmp	.+186    	; 0xf34 <__stack+0x635>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	09 f4       	brne	.+2      	; 0xe80 <__stack+0x581>
     e7e:	7f c0       	rjmp	.+254    	; 0xf7e <__stack+0x67f>
     e80:	c1 2c       	mov	r12, r1
     e82:	d1 2c       	mov	r13, r1
     e84:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     e86:	4c 29       	or	r20, r12
     e88:	5d 29       	or	r21, r13
     e8a:	6e 29       	or	r22, r14
     e8c:	7f 29       	or	r23, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     e8e:	29 2f       	mov	r18, r25
     e90:	26 95       	lsr	r18
     e92:	26 95       	lsr	r18
     e94:	23 70       	andi	r18, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     e96:	21 30       	cpi	r18, 0x01	; 1
     e98:	09 f4       	brne	.+2      	; 0xe9c <__stack+0x59d>
     e9a:	46 c0       	rjmp	.+140    	; 0xf28 <__stack+0x629>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	09 f4       	brne	.+2      	; 0xea2 <__stack+0x5a3>
     ea0:	67 c0       	rjmp	.+206    	; 0xf70 <__stack+0x671>
     ea2:	c1 2c       	mov	r12, r1
     ea4:	d1 2c       	mov	r13, r1
     ea6:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     ea8:	4c 29       	or	r20, r12
     eaa:	5d 29       	or	r21, r13
     eac:	6e 29       	or	r22, r14
     eae:	7f 29       	or	r23, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     eb0:	89 2f       	mov	r24, r25
     eb2:	82 95       	swap	r24
     eb4:	83 70       	andi	r24, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	91 f1       	breq	.+100    	; 0xf1e <__stack+0x61f>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	09 f4       	brne	.+2      	; 0xec0 <__stack+0x5c1>
     ebe:	65 c0       	rjmp	.+202    	; 0xf8a <__stack+0x68b>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	dc 01       	movw	r26, r24
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
     ec6:	84 2b       	or	r24, r20
     ec8:	95 2b       	or	r25, r21
     eca:	a6 2b       	or	r26, r22
     ecc:	b7 2b       	or	r27, r23
     ece:	81 93       	st	Z+, r24
     ed0:	91 93       	st	Z+, r25
     ed2:	a1 93       	st	Z+, r26
     ed4:	b1 93       	st	Z+, r27
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
     ed6:	0e 17       	cp	r16, r30
     ed8:	1f 07       	cpc	r17, r31
     eda:	09 f4       	brne	.+2      	; 0xede <__stack+0x5df>
     edc:	cf ce       	rjmp	.-610    	; 0xc7c <__stack+0x37d>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
     ede:	ab 81       	ldd	r26, Y+3	; 0x03
     ee0:	bc 81       	ldd	r27, Y+4	; 0x04
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	bc 83       	std	Y+4, r27	; 0x04
     ee8:	ab 83       	std	Y+3, r26	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	23 70       	andi	r18, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     eee:	21 30       	cpi	r18, 0x01	; 1
     ef0:	09 f0       	breq	.+2      	; 0xef4 <__stack+0x5f5>
     ef2:	74 cf       	rjmp	.-280    	; 0xddc <__stack+0x4dd>
     ef4:	aa 24       	eor	r10, r10
     ef6:	a3 94       	inc	r10
     ef8:	b1 2c       	mov	r11, r1
     efa:	c1 2c       	mov	r12, r1
     efc:	d1 2c       	mov	r13, r1
     efe:	49 e0       	ldi	r20, 0x09	; 9
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	a9 e1       	ldi	r26, 0x19	; 25
     f08:	ea 2e       	mov	r14, r26
     f0a:	f1 2c       	mov	r15, r1
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	a0 e0       	ldi	r26, 0x00	; 0
     f10:	75 cf       	rjmp	.-278    	; 0xdfc <__stack+0x4fd>
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
	for(int i=0;i<7;i++){	// Look for the button number that is pressed
		if(((PIND >> i) & 0b1) == 0){
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	b8 2e       	mov	r11, r24
     f16:	3d cd       	rjmp	.-1414   	; 0x992 <__stack+0x93>
     f18:	94 e0       	ldi	r25, 0x04	; 4
     f1a:	b9 2e       	mov	r11, r25
     f1c:	3a cd       	rjmp	.-1420   	; 0x992 <__stack+0x93>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a0 e1       	ldi	r26, 0x10	; 16
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	cf cf       	rjmp	.-98     	; 0xec6 <__stack+0x5c7>
     f28:	c1 2c       	mov	r12, r1
     f2a:	b0 e8       	ldi	r27, 0x80	; 128
     f2c:	db 2e       	mov	r13, r27
     f2e:	e1 2c       	mov	r14, r1
     f30:	f1 2c       	mov	r15, r1
     f32:	ba cf       	rjmp	.-140    	; 0xea8 <__stack+0x5a9>
     f34:	c1 2c       	mov	r12, r1
     f36:	20 e1       	ldi	r18, 0x10	; 16
     f38:	d2 2e       	mov	r13, r18
     f3a:	e1 2c       	mov	r14, r1
     f3c:	f1 2c       	mov	r15, r1
     f3e:	a3 cf       	rjmp	.-186    	; 0xe86 <__stack+0x587>
     f40:	c1 2c       	mov	r12, r1
     f42:	a2 e0       	ldi	r26, 0x02	; 2
     f44:	da 2e       	mov	r13, r26
     f46:	e1 2c       	mov	r14, r1
     f48:	f1 2c       	mov	r15, r1
     f4a:	8e cf       	rjmp	.-228    	; 0xe68 <__stack+0x569>
     f4c:	30 e4       	ldi	r19, 0x40	; 64
     f4e:	c3 2e       	mov	r12, r19
     f50:	d1 2c       	mov	r13, r1
     f52:	e1 2c       	mov	r14, r1
     f54:	f1 2c       	mov	r15, r1
     f56:	70 cf       	rjmp	.-288    	; 0xe38 <__stack+0x539>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
     f58:	c1 2c       	mov	r12, r1
     f5a:	36 e0       	ldi	r19, 0x06	; 6
     f5c:	d3 2e       	mov	r13, r19
     f5e:	e1 2c       	mov	r14, r1
     f60:	f1 2c       	mov	r15, r1
     f62:	82 cf       	rjmp	.-252    	; 0xe68 <__stack+0x569>
     f64:	20 ec       	ldi	r18, 0xC0	; 192
     f66:	c2 2e       	mov	r12, r18
     f68:	d1 2c       	mov	r13, r1
     f6a:	e1 2c       	mov	r14, r1
     f6c:	f1 2c       	mov	r15, r1
     f6e:	64 cf       	rjmp	.-312    	; 0xe38 <__stack+0x539>
     f70:	c1 2c       	mov	r12, r1
     f72:	a0 e8       	ldi	r26, 0x80	; 128
     f74:	da 2e       	mov	r13, r26
     f76:	ee 24       	eor	r14, r14
     f78:	e3 94       	inc	r14
     f7a:	f1 2c       	mov	r15, r1
     f7c:	95 cf       	rjmp	.-214    	; 0xea8 <__stack+0x5a9>
     f7e:	c1 2c       	mov	r12, r1
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	d8 2e       	mov	r13, r24
     f84:	e1 2c       	mov	r14, r1
     f86:	f1 2c       	mov	r15, r1
     f88:	7e cf       	rjmp	.-260    	; 0xe86 <__stack+0x587>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a8 e1       	ldi	r26, 0x18	; 24
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	99 cf       	rjmp	.-206    	; 0xec6 <__stack+0x5c7>
     f94:	23 e0       	ldi	r18, 0x03	; 3
     f96:	a2 2e       	mov	r10, r18
     f98:	b1 2c       	mov	r11, r1
     f9a:	c1 2c       	mov	r12, r1
     f9c:	d1 2c       	mov	r13, r1
     f9e:	4b e0       	ldi	r20, 0x0B	; 11
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	3b e1       	ldi	r19, 0x1B	; 27
     fa8:	e3 2e       	mov	r14, r19
     faa:	f1 2c       	mov	r15, r1
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	25 cf       	rjmp	.-438    	; 0xdfc <__stack+0x4fd>
     fb2:	a7 01       	movw	r20, r14
     fb4:	6b 2f       	mov	r22, r27
     fb6:	7a 2f       	mov	r23, r26
     fb8:	2e cf       	rjmp	.-420    	; 0xe16 <__stack+0x517>
			if(foundRow == 0){		// If didn't find the non-ocupied row, must be the last one
				players[5] |= active_player << (c*2);
				players[5-1] &= ~(0b11 << (c*2));
				playerToLed();
			}
			SWITCH_ACTIVE_PLAYER;		// Switch the active player if the row isn't fully occupied
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	66 ce       	rjmp	.-820    	; 0xc8a <__stack+0x38b>
			int w = checkForWinner();	// Check for who, or none, player that one
			
			//Reset loop, only is activated if there is a winner or it is to be reset by software
			if(w!= 0){
				_delay_ms(250);
				for(int i=0;i<6;i++){led[i] = 0;}
     fbe:	85 e0       	ldi	r24, 0x05	; 5
     fc0:	90 e0       	ldi	r25, 0x00	; 0
				// Blink thru the indicator LED
				for(int i=0;i<5;i++){
					if(w == 1){led[0] = 0b001001001;}
     fc2:	49 e4       	ldi	r20, 0x49	; 73
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <led>
     fce:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <led+0x1>
     fd2:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <led+0x2>
     fd6:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <led+0x3>
     fda:	ff ef       	ldi	r31, 0xFF	; 255
     fdc:	27 e8       	ldi	r18, 0x87	; 135
     fde:	33 e1       	ldi	r19, 0x13	; 19
     fe0:	f1 50       	subi	r31, 0x01	; 1
     fe2:	20 40       	sbci	r18, 0x00	; 0
     fe4:	30 40       	sbci	r19, 0x00	; 0
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <__stack+0x6e1>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <__stack+0x6eb>
     fea:	00 00       	nop
					else if(w == 2){led[0] = 0b011011011;}
					_delay_ms(400);
					led[0] = 0;
     fec:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <led>
     ff0:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <led+0x1>
     ff4:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <led+0x2>
     ff8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <led+0x3>
     ffc:	af ef       	ldi	r26, 0xFF	; 255
     ffe:	b7 e8       	ldi	r27, 0x87	; 135
    1000:	e3 e1       	ldi	r30, 0x13	; 19
    1002:	a1 50       	subi	r26, 0x01	; 1
    1004:	b0 40       	sbci	r27, 0x00	; 0
    1006:	e0 40       	sbci	r30, 0x00	; 0
    1008:	e1 f7       	brne	.-8      	; 0x1002 <__stack+0x703>
    100a:	00 c0       	rjmp	.+0      	; 0x100c <__stack+0x70d>
    100c:	00 00       	nop
    100e:	01 97       	sbiw	r24, 0x01	; 1
			//Reset loop, only is activated if there is a winner or it is to be reset by software
			if(w!= 0){
				_delay_ms(250);
				for(int i=0;i<6;i++){led[i] = 0;}
				// Blink thru the indicator LED
				for(int i=0;i<5;i++){
    1010:	e1 f6       	brne	.-72     	; 0xfca <__stack+0x6cb>
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
    1012:	89 b1       	in	r24, 0x09	; 9
    1014:	8f 3f       	cpi	r24, 0xFF	; 255
    1016:	09 f4       	brne	.+2      	; 0x101a <__stack+0x71b>
    1018:	9e ce       	rjmp	.-708    	; 0xd56 <__stack+0x457>
    101a:	a0 ce       	rjmp	.-704    	; 0xd5c <__stack+0x45d>
			int w = checkForWinner();	// Check for who, or none, player that one
			
			//Reset loop, only is activated if there is a winner or it is to be reset by software
			if(w!= 0){
				_delay_ms(250);
				for(int i=0;i<6;i++){led[i] = 0;}
    101c:	85 e0       	ldi	r24, 0x05	; 5
    101e:	90 e0       	ldi	r25, 0x00	; 0
				// Blink thru the indicator LED
				for(int i=0;i<5;i++){
					if(w == 1){led[0] = 0b001001001;}
					else if(w == 2){led[0] = 0b011011011;}
    1020:	4b ed       	ldi	r20, 0xDB	; 219
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <led>
    102c:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <led+0x1>
    1030:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <led+0x2>
    1034:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <led+0x3>
    1038:	ff ef       	ldi	r31, 0xFF	; 255
    103a:	27 e8       	ldi	r18, 0x87	; 135
    103c:	33 e1       	ldi	r19, 0x13	; 19
    103e:	f1 50       	subi	r31, 0x01	; 1
    1040:	20 40       	sbci	r18, 0x00	; 0
    1042:	30 40       	sbci	r19, 0x00	; 0
    1044:	e1 f7       	brne	.-8      	; 0x103e <__stack+0x73f>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <__stack+0x749>
    1048:	00 00       	nop
					_delay_ms(400);
					led[0] = 0;
    104a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <led>
    104e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <led+0x1>
    1052:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <led+0x2>
    1056:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <led+0x3>
    105a:	af ef       	ldi	r26, 0xFF	; 255
    105c:	b7 e8       	ldi	r27, 0x87	; 135
    105e:	e3 e1       	ldi	r30, 0x13	; 19
    1060:	a1 50       	subi	r26, 0x01	; 1
    1062:	b0 40       	sbci	r27, 0x00	; 0
    1064:	e0 40       	sbci	r30, 0x00	; 0
    1066:	e1 f7       	brne	.-8      	; 0x1060 <__stack+0x761>
    1068:	00 c0       	rjmp	.+0      	; 0x106a <__stack+0x76b>
    106a:	00 00       	nop
    106c:	01 97       	sbiw	r24, 0x01	; 1
			//Reset loop, only is activated if there is a winner or it is to be reset by software
			if(w!= 0){
				_delay_ms(250);
				for(int i=0;i<6;i++){led[i] = 0;}
				// Blink thru the indicator LED
				for(int i=0;i<5;i++){
    106e:	e1 f6       	brne	.-72     	; 0x1028 <__stack+0x729>
	}
	sei();
}

int waitForButtonInput(void){
	while(PIND == 0xFF);
    1070:	89 b1       	in	r24, 0x09	; 9
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	09 f4       	brne	.+2      	; 0x1078 <__stack+0x779>
    1076:	6f ce       	rjmp	.-802    	; 0xd56 <__stack+0x457>
    1078:	71 ce       	rjmp	.-798    	; 0xd5c <__stack+0x45d>
				}
				while(1){	// Wait until button is pressed to reset game
					int c = waitForButtonInput();
					if(c == 1){		// If pressed the button right of the indicator
						// Reset the variables
						active_player = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>

// TODO: Turn this into a macro
// Function to clear the buffer of an array
void clearBuffer(uint16_t *c, int array_lenght){
	for(int i=0;i<array_lenght;i++){
		c[i] = 0;
    1080:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <players+0x1>
    1084:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <players>
    1088:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <players+0x3>
    108c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <players+0x2>
    1090:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <players+0x5>
    1094:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <players+0x4>
    1098:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <players+0x7>
    109c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <players+0x6>
    10a0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <players+0x9>
    10a4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <players+0x8>
    10a8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <players+0xb>
    10ac:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <players+0xa>
	}
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
    10b0:	f8 94       	cli
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    10b2:	a9 81       	ldd	r26, Y+1	; 0x01
    10b4:	ba 81       	ldd	r27, Y+2	; 0x02
    10b6:	2d 91       	ld	r18, X+
    10b8:	3d 91       	ld	r19, X+
    10ba:	ba 83       	std	Y+2, r27	; 0x02
    10bc:	a9 83       	std	Y+1, r26	; 0x01
    10be:	82 2f       	mov	r24, r18
    10c0:	83 70       	andi	r24, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__stack+0x7c9>
    10c6:	da c0       	rjmp	.+436    	; 0x127c <__stack+0x97d>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	09 f4       	brne	.+2      	; 0x10ce <__stack+0x7cf>
    10cc:	c9 c0       	rjmp	.+402    	; 0x1260 <__stack+0x961>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	dc 01       	movw	r26, r24
    10d4:	e8 e0       	ldi	r30, 0x08	; 8
    10d6:	f1 2c       	mov	r15, r1
    10d8:	00 e0       	ldi	r16, 0x00	; 0
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	f8 e1       	ldi	r31, 0x18	; 24
    10de:	fd 83       	std	Y+5, r31	; 0x05
    10e0:	1b 82       	std	Y+3, r1	; 0x03
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	60 e0       	ldi	r22, 0x00	; 0
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    10e6:	a9 01       	movw	r20, r18
    10e8:	56 95       	lsr	r21
    10ea:	47 95       	ror	r20
    10ec:	56 95       	lsr	r21
    10ee:	47 95       	ror	r20
    10f0:	43 70       	andi	r20, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    10f2:	41 30       	cpi	r20, 0x01	; 1
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <__stack+0x7f9>
    10f6:	b0 c0       	rjmp	.+352    	; 0x1258 <__stack+0x959>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    10f8:	42 30       	cpi	r20, 0x02	; 2
    10fa:	09 f4       	brne	.+2      	; 0x10fe <__stack+0x7ff>
    10fc:	a8 c0       	rjmp	.+336    	; 0x124e <__stack+0x94f>
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    10fe:	a9 01       	movw	r20, r18
    1100:	52 95       	swap	r21
    1102:	42 95       	swap	r20
    1104:	4f 70       	andi	r20, 0x0F	; 15
    1106:	45 27       	eor	r20, r21
    1108:	5f 70       	andi	r21, 0x0F	; 15
    110a:	45 27       	eor	r20, r21
    110c:	43 70       	andi	r20, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    110e:	41 30       	cpi	r20, 0x01	; 1
    1110:	09 f4       	brne	.+2      	; 0x1114 <__stack+0x815>
    1112:	98 c0       	rjmp	.+304    	; 0x1244 <__stack+0x945>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    1114:	42 30       	cpi	r20, 0x02	; 2
    1116:	09 f4       	brne	.+2      	; 0x111a <__stack+0x81b>
    1118:	90 c0       	rjmp	.+288    	; 0x123a <__stack+0x93b>
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	ba 01       	movw	r22, r20
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    1120:	84 2b       	or	r24, r20
    1122:	95 2b       	or	r25, r21
    1124:	a6 2b       	or	r26, r22
    1126:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    1128:	a9 01       	movw	r20, r18
    112a:	00 24       	eor	r0, r0
    112c:	44 0f       	add	r20, r20
    112e:	55 1f       	adc	r21, r21
    1130:	00 1c       	adc	r0, r0
    1132:	44 0f       	add	r20, r20
    1134:	55 1f       	adc	r21, r21
    1136:	00 1c       	adc	r0, r0
    1138:	45 2f       	mov	r20, r21
    113a:	50 2d       	mov	r21, r0
    113c:	43 70       	andi	r20, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    113e:	41 30       	cpi	r20, 0x01	; 1
    1140:	09 f4       	brne	.+2      	; 0x1144 <__stack+0x845>
    1142:	76 c0       	rjmp	.+236    	; 0x1230 <__stack+0x931>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    1144:	42 30       	cpi	r20, 0x02	; 2
    1146:	09 f4       	brne	.+2      	; 0x114a <__stack+0x84b>
    1148:	6e c0       	rjmp	.+220    	; 0x1226 <__stack+0x927>
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	ba 01       	movw	r22, r20
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    1150:	84 2b       	or	r24, r20
    1152:	95 2b       	or	r25, r21
    1154:	a6 2b       	or	r26, r22
    1156:	b7 2b       	or	r27, r23
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    1158:	43 2f       	mov	r20, r19
    115a:	43 70       	andi	r20, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    115c:	41 30       	cpi	r20, 0x01	; 1
    115e:	09 f4       	brne	.+2      	; 0x1162 <__stack+0x863>
    1160:	5c c0       	rjmp	.+184    	; 0x121a <__stack+0x91b>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    1162:	42 30       	cpi	r20, 0x02	; 2
    1164:	09 f4       	brne	.+2      	; 0x1168 <__stack+0x869>
    1166:	53 c0       	rjmp	.+166    	; 0x120e <__stack+0x90f>
    1168:	c1 2c       	mov	r12, r1
    116a:	d1 2c       	mov	r13, r1
    116c:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    116e:	8c 29       	or	r24, r12
    1170:	9d 29       	or	r25, r13
    1172:	ae 29       	or	r26, r14
    1174:	bf 29       	or	r27, r15
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    1176:	43 2f       	mov	r20, r19
    1178:	46 95       	lsr	r20
    117a:	46 95       	lsr	r20
    117c:	43 70       	andi	r20, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    117e:	41 30       	cpi	r20, 0x01	; 1
    1180:	09 f4       	brne	.+2      	; 0x1184 <__stack+0x885>
    1182:	3f c0       	rjmp	.+126    	; 0x1202 <__stack+0x903>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    1184:	42 30       	cpi	r20, 0x02	; 2
    1186:	b1 f1       	breq	.+108    	; 0x11f4 <__stack+0x8f5>
    1188:	c1 2c       	mov	r12, r1
    118a:	d1 2c       	mov	r13, r1
    118c:	76 01       	movw	r14, r12
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    118e:	c8 2a       	or	r12, r24
    1190:	d9 2a       	or	r13, r25
    1192:	ea 2a       	or	r14, r26
    1194:	fb 2a       	or	r15, r27
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
    1196:	83 2f       	mov	r24, r19
    1198:	82 95       	swap	r24
    119a:	83 70       	andi	r24, 0x03	; 3
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	29 f1       	breq	.+74     	; 0x11ea <__stack+0x8eb>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	f1 f0       	breq	.+60     	; 0x11e0 <__stack+0x8e1>
    11a4:	00 e0       	ldi	r16, 0x00	; 0
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	98 01       	movw	r18, r16
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
    11aa:	0c 29       	or	r16, r12
    11ac:	1d 29       	or	r17, r13
    11ae:	2e 29       	or	r18, r14
    11b0:	3f 29       	or	r19, r15
    11b2:	d1 01       	movw	r26, r2
    11b4:	0d 93       	st	X+, r16
    11b6:	1d 93       	st	X+, r17
    11b8:	2d 93       	st	X+, r18
    11ba:	3d 93       	st	X+, r19
    11bc:	1d 01       	movw	r2, r26
}

// Function to take player's location and convert it to an LED matrix
void playerToLed(void){
	cli();
	for(int r=0;r<6;r++){
    11be:	ba e5       	ldi	r27, 0x5A	; 90
    11c0:	2b 16       	cp	r2, r27
    11c2:	b1 e0       	ldi	r27, 0x01	; 1
    11c4:	3b 06       	cpc	r3, r27
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__stack+0x8cb>
    11c8:	74 cf       	rjmp	.-280    	; 0x10b2 <__stack+0x7b3>
				to_shift = (c==6) ? 0b110: 0b011;
			}
			led[r] |= ((uint32_t)to_shift << (c*3));
		}
	}
	sei();
    11ca:	78 94       	sei
    11cc:	ef ef       	ldi	r30, 0xFF	; 255
    11ce:	f9 e6       	ldi	r31, 0x69	; 105
    11d0:	28 e1       	ldi	r18, 0x18	; 24
    11d2:	e1 50       	subi	r30, 0x01	; 1
    11d4:	f0 40       	sbci	r31, 0x00	; 0
    11d6:	20 40       	sbci	r18, 0x00	; 0
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <__stack+0x8d3>
    11da:	00 c0       	rjmp	.+0      	; 0x11dc <__stack+0x8dd>
    11dc:	00 00       	nop
    11de:	c8 cb       	rjmp	.-2160   	; 0x970 <__stack+0x71>
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    11e0:	00 e0       	ldi	r16, 0x00	; 0
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	28 e1       	ldi	r18, 0x18	; 24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	e0 cf       	rjmp	.-64     	; 0x11aa <__stack+0x8ab>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	20 e1       	ldi	r18, 0x10	; 16
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	db cf       	rjmp	.-74     	; 0x11aa <__stack+0x8ab>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    11f4:	c1 2c       	mov	r12, r1
    11f6:	20 e8       	ldi	r18, 0x80	; 128
    11f8:	d2 2e       	mov	r13, r18
    11fa:	ee 24       	eor	r14, r14
    11fc:	e3 94       	inc	r14
    11fe:	f1 2c       	mov	r15, r1
    1200:	c6 cf       	rjmp	.-116    	; 0x118e <__stack+0x88f>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    1202:	c1 2c       	mov	r12, r1
    1204:	40 e8       	ldi	r20, 0x80	; 128
    1206:	d4 2e       	mov	r13, r20
    1208:	e1 2c       	mov	r14, r1
    120a:	f1 2c       	mov	r15, r1
    120c:	c0 cf       	rjmp	.-128    	; 0x118e <__stack+0x88f>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    120e:	c1 2c       	mov	r12, r1
    1210:	50 e3       	ldi	r21, 0x30	; 48
    1212:	d5 2e       	mov	r13, r21
    1214:	e1 2c       	mov	r14, r1
    1216:	f1 2c       	mov	r15, r1
    1218:	aa cf       	rjmp	.-172    	; 0x116e <__stack+0x86f>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    121a:	c1 2c       	mov	r12, r1
    121c:	60 e1       	ldi	r22, 0x10	; 16
    121e:	d6 2e       	mov	r13, r22
    1220:	e1 2c       	mov	r14, r1
    1222:	f1 2c       	mov	r15, r1
    1224:	a4 cf       	rjmp	.-184    	; 0x116e <__stack+0x86f>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	56 e0       	ldi	r21, 0x06	; 6
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	90 cf       	rjmp	.-224    	; 0x1150 <__stack+0x851>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	52 e0       	ldi	r21, 0x02	; 2
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	8b cf       	rjmp	.-234    	; 0x1150 <__stack+0x851>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    123a:	40 ec       	ldi	r20, 0xC0	; 192
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	6e cf       	rjmp	.-292    	; 0x1120 <__stack+0x821>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    1244:	40 e4       	ldi	r20, 0x40	; 64
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	69 cf       	rjmp	.-302    	; 0x1120 <__stack+0x821>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	a7 2f       	mov	r26, r23
    1254:	b6 2f       	mov	r27, r22
    1256:	53 cf       	rjmp	.-346    	; 0x10fe <__stack+0x7ff>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    1258:	8e 2f       	mov	r24, r30
    125a:	9f 2d       	mov	r25, r15
    125c:	d8 01       	movw	r26, r16
    125e:	4f cf       	rjmp	.-354    	; 0x10fe <__stack+0x7ff>
				to_shift = (c==6) ? 0b100: 0b001;
			}
			else if(playerAtLoc == 0b10){
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e0       	ldi	r30, 0x0B	; 11
    126a:	f1 2c       	mov	r15, r1
    126c:	00 e0       	ldi	r16, 0x00	; 0
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	fb e1       	ldi	r31, 0x1B	; 27
    1272:	fd 83       	std	Y+5, r31	; 0x05
    1274:	1b 82       	std	Y+3, r1	; 0x03
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	35 cf       	rjmp	.-406    	; 0x10e6 <__stack+0x7e7>
		led[r] = 0L; // Clear LED buffer
		for(int c=0;c<7;c++){
			uint8_t playerAtLoc = (players[r] >> (c*2)) & 0b11;
			uint8_t to_shift=0;
			// There's a tenerary operation because of a misfault in PCB design
			if(playerAtLoc == 0b01){
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e9 e0       	ldi	r30, 0x09	; 9
    1286:	f1 2c       	mov	r15, r1
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	49 e1       	ldi	r20, 0x19	; 25
    128e:	4d 83       	std	Y+5, r20	; 0x05
    1290:	1b 82       	std	Y+3, r1	; 0x03
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	27 cf       	rjmp	.-434    	; 0x10e6 <__stack+0x7e7>

00001298 <_exit>:
    1298:	f8 94       	cli

0000129a <__stop_program>:
    129a:	ff cf       	rjmp	.-2      	; 0x129a <__stop_program>
